#!/usr/bin/env python3
"""
Script pour ajouter du code de d√©bogage JavaScript dans le HTML
afin de voir exactement ce qui se passe avec le positionnement des matchs.
"""

import json
from pathlib import Path

def inject_debug_code():
    """Injecte du code de d√©bogage dans le HTML."""
    
    html_path = Path("data_volley/calendrier_volley.html")
    
    # Lire le HTML
    with open(html_path, 'r', encoding='utf-8') as f:
        html_content = f.read()
    
    # Code de d√©bogage √† injecter
    debug_code = """
        // ==================== CODE DE D√âBOGAGE ====================
        console.log('%cüîç D√âBOGAGE DU POSITIONNEMENT DES MATCHS', 'font-size: 16px; font-weight: bold; color: #3498db');
        
        // Attendre que tout soit charg√©
        setTimeout(() => {
            console.log('%cüìä INFORMATIONS G√âN√âRALES', 'font-size: 14px; font-weight: bold; color: #27ae60');
            
            // 1. V√©rifier les donn√©es brutes
            console.log('Nombre de matchs:', rawMatchsData ? rawMatchsData.length : 0);
            if (rawMatchsData && rawMatchsData.length > 0) {
                console.log('Premier match:', rawMatchsData[0]);
                console.log('Dernier match:', rawMatchsData[rawMatchsData.length - 1]);
            }
            
            // 2. V√©rifier la grille
            const grid = document.querySelector('.calendar-grid-view');
            if (grid && grid.__calendarGridView) {
                const view = grid.__calendarGridView;
                console.log('\\n%c‚è∞ PLAGE HORAIRE DE LA GRILLE', 'font-size: 14px; font-weight: bold; color: #e74c3c');
                console.log('startHour:', view.startHour, '(' + view.startHour + ':00)');
                console.log('endHour:', view.endHour, '(' + view.endHour + ':00)');
                console.log('gridStartMinutes:', view.startHour * 60);
                console.log('gridEndMinutes:', view.endHour * 60);
                console.log('matchDuration:', view.matchDuration, 'minutes');
                console.log('timeSlotMinutes:', view.timeSlotMinutes, 'minutes');
                
                // 3. V√©rifier le calcul de hauteur
                const slotHeight = view.getSlotHeight();
                console.log('\\n%cüìè DIMENSIONS', 'font-size: 14px; font-weight: bold; color: #9b59b6');
                console.log('slotHeight:', slotHeight, 'px (pour', view.timeSlotMinutes, 'min)');
                console.log('pixelsPerMinute:', slotHeight / view.timeSlotMinutes);
                console.log('windowHeight:', window.innerHeight, 'px');
                
                // 4. Analyser les matchs affich√©s
                const matchBlocks = document.querySelectorAll('.match-block');
                console.log('\\n%cüéØ MATCHS AFFICH√âS', 'font-size: 14px; font-weight: bold; color: #f39c12');
                console.log('Nombre de blocs DOM:', matchBlocks.length);
                
                if (matchBlocks.length > 0) {
                    const firstBlock = matchBlocks[0];
                    const topValue = firstBlock.style.top;
                    const heightValue = firstBlock.style.height;
                    console.log('Premier bloc:');
                    console.log('  - top:', topValue);
                    console.log('  - height:', heightValue);
                    console.log('  - data-match:', firstBlock.getAttribute('data-match'));
                    
                    // Calculer la position th√©orique
                    const matchData = JSON.parse(firstBlock.getAttribute('data-match') || '{}');
                    if (matchData.horaire) {
                        const [h, m] = matchData.horaire.split(':').map(Number);
                        const matchMinutes = h * 60 + m;
                        const gridStartMinutes = view.startHour * 60;
                        const offsetMinutes = matchMinutes - gridStartMinutes;
                        const pixelsPerMinute = slotHeight / view.timeSlotMinutes;
                        const theoreticalTop = offsetMinutes * pixelsPerMinute;
                        const theoreticalHeight = view.matchDuration * pixelsPerMinute;
                        
                        console.log('  - horaire:', matchData.horaire);
                        console.log('  - matchMinutes:', matchMinutes);
                        console.log('  - offsetMinutes:', offsetMinutes);
                        console.log('  - TH√âORIQUE top:', theoreticalTop, 'px');
                        console.log('  - TH√âORIQUE height:', theoreticalHeight, 'px');
                        console.log('  - R√âEL top:', topValue);
                        console.log('  - R√âEL height:', heightValue);
                        
                        if (parseFloat(topValue) !== theoreticalTop) {
                            console.error('‚ö†Ô∏è PROBL√àME: Le top r√©el ne correspond pas au top th√©orique!');
                        }
                    }
                }
                
                // 5. Analyser les horaires de tous les matchs
                console.log('\\n%cüïê ANALYSE DES HORAIRES', 'font-size: 14px; font-weight: bold; color: #16a085');
                const allHoraires = rawMatchsData.map(m => m.horaire).filter(h => h);
                const uniqueHoraires = [...new Set(allHoraires)].sort();
                console.log('Horaires uniques:', uniqueHoraires);
                
                const times = uniqueHoraires.map(h => {
                    const [hours, minutes] = h.split(':').map(Number);
                    const totalMinutes = hours * 60 + minutes;
                    return { horaire: h, minutes: totalMinutes };
                });
                console.log('En minutes:', times);
                
                const minTime = Math.min(...times.map(t => t.minutes));
                const maxTime = Math.max(...times.map(t => t.minutes));
                console.log('Plage:', Math.floor(minTime/60) + ':' + (minTime%60).toString().padStart(2,'0'), 
                           '‚Üí', Math.floor(maxTime/60) + ':' + (maxTime%60).toString().padStart(2,'0'));
                
            } else {
                console.error('‚ùå Impossible de trouver l\'instance CalendarGridView!');
            }
            
            console.log('\\n%c‚úÖ FIN DU D√âBOGAGE', 'font-size: 16px; font-weight: bold; color: #3498db');
            console.log('Ouvrez cet onglet dans les outils de d√©veloppement pour voir les d√©tails');
            
        }, 1000);
"""
    
    # Trouver o√π injecter (juste avant </body>)
    injection_point = html_content.rfind('</body>')
    if injection_point == -1:
        print("‚ùå Impossible de trouver </body> dans le HTML")
        return False
    
    # Injecter
    new_html = (
        html_content[:injection_point] +
        '    <script>\n' +
        debug_code +
        '    </script>\n' +
        html_content[injection_point:]
    )
    
    # Sauvegarder
    output_path = Path("data_volley/calendrier_volley_DEBUG.html")
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(new_html)
    
    file_size = output_path.stat().st_size
    print("=" * 70)
    print("HTML DE D√âBOGAGE G√âN√âR√â")
    print("=" * 70)
    print(f"\nüìÑ Fichier: {output_path}")
    print(f"üìä Taille: {file_size:,} octets ({file_size/1024:.1f} KB)")
    print("\nüîç INSTRUCTIONS:")
    print("   1. Ouvrez le fichier dans votre navigateur")
    print("   2. Ouvrez la console d√©veloppeur (F12)")
    print("   3. Regardez les informations de d√©bogage affich√©es")
    print("   4. V√©rifiez si:")
    print("      - startHour et endHour sont corrects")
    print("      - Le top TH√âORIQUE correspond au top R√âEL")
    print("      - Les horaires des matchs sont bien pars√©s")
    print("\nüí° Rapportez-moi les valeurs affich√©es dans la console!")
    print("=" * 70)
    
    return True

if __name__ == "__main__":
    inject_debug_code()
