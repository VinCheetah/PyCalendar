# Prompt 1.7 : Scripts CLI ‚Äì Initialisation et Import# Prompt 1.7 : Scripts CLI ‚Äì Initialisation et Import



## Contexte global## Contexte global

PyCalendar V2 doit proposer des scripts CLI pour initialiser la base de donn√©es et importer des projets depuis les fichiers de configuration (YAML + Excel). Ces scripts facilitent l'automatisation, la maintenance et le d√©ploiement de l'application.PyCalendar V2 doit proposer des scripts CLI pour initialiser la base de donn√©es et importer des projets depuis des fichiers Excel/YAML. Ces scripts facilitent l'automatisation, la maintenance et le d√©ploiement de l'application.



**RAPPEL - Double configuration** :## Contexte technique

- **Fichier YAML** : Hyperparam√®tres + r√©f√©rence au fichier ExcelCette t√¢che concerne la cr√©ation de scripts CLI robustes et bien organis√©s pour l'initialisation de la base de donn√©es et l'import des donn√©es via le service de synchronisation.

- **Fichier Excel** : Donn√©es d√©taill√©es (√©quipes, gymnases, contraintes)

- **Validation** : `actualiser_config.py` valide/corrige la structure Excel AVANT import## R√©sum√© du travail pr√©c√©dent

- La base de donn√©es, les mod√®les et l'engine sont en place (`backend/database/`).

## Contexte technique- Le service de synchronisation est op√©rationnel (`backend/services/sync_service.py`).

Cette t√¢che cr√©e des scripts CLI robustes pour :- Les besoins d'automatisation et de facilit√© d'utilisation sont identifi√©s.

1. Initialiser la base de donn√©es (cr√©er tables)

2. Importer un projet depuis YAML+Excel (via SyncService)## Objectifs

3. Afficher des statistiques d'import- D√©finir des scripts CLI clairs, testables et extensibles.

- S'assurer de la robustesse, de la gestion des erreurs et de la clart√© des scripts.

## R√©sum√© du travail pr√©c√©dent- Pr√©voir l'ajout facile de nouvelles commandes ou options.

- La base de donn√©es, mod√®les et engine sont en place (`backend/database/`) - T√¢che 1.3

- Le service de synchronisation est op√©rationnel (`backend/services/sync_service.py`) - T√¢che 1.6## D√©tails techniques

- Le service utilise `Config`, `ConfigManager`, `DataSource`, g√©n√©rateurs existants

- La validation Excel via `actualiser_config.py` est disponible### Script 1 : Initialisation de la base de donn√©es

**Fichier √† cr√©er** : `scripts/init_db.py`

## Objectifs

1. Cr√©er script `init_db.py` pour initialiser la base de donn√©es**Contenu requis** :

2. Cr√©er script `import_excel.py` pour importer un projet (YAML+Excel ‚Üí DB)

3. Assurer robustesse, gestion d'erreurs et messages clairs```python

4. Pr√©voir extensibilit√© (nouvelles commandes, options)import sys

from pathlib import Path

## D√©tails techniques

# Ajouter r√©pertoire parent au sys.path pour imports PyCalendar

### Script 1 : Initialisation de la base de donn√©esproject_root = Path(__file__).parent.parent

sys.path.insert(0, str(project_root))

**üìÅ Fichier √† cr√©er** : `scripts/init_db.py`

from backend.database.engine import init_db

**Contenu complet** :

if __name__ == "__main__":

```python    print("Initialisation de la base de donn√©es...")

#!/usr/bin/env python3    init_db()

"""    print("‚úì Base de donn√©es initialis√©e avec succ√®s")

Script d'initialisation de la base de donn√©es PyCalendar.    print("Fichier : database/pycalendar.db")

```

Cr√©e toutes les tables n√©cessaires dans database/pycalendar.db.

"""**Consignes** :

- Import du module `init_db` depuis `backend.database.engine`

import sys- Ajout du projet au sys.path pour r√©soudre les imports

from pathlib import Path- Messages clairs pour l'utilisateur

- Gestion simple (pas d'arguments)

# Ajouter r√©pertoire racine au sys.path pour imports

project_root = Path(__file__).parent.parent**Usage** : `python scripts/init_db.py`

sys.path.insert(0, str(project_root))

### Script 2 : Import depuis Excel

from backend.database.engine import init_db, DATABASE_PATH**Fichier √† cr√©er** : `scripts/import_excel.py`



def main():**Contenu requis** :

    print("=" * 60)

    print("Initialisation de la base de donn√©es PyCalendar")```python

    print("=" * 60)import sys

    from pathlib import Path

    # Afficher chemin DBimport argparse

    print(f"\nüìÇ Chemin de la base de donn√©es :")

    print(f"   {DATABASE_PATH}")# Ajouter r√©pertoire parent au sys.path

    project_root = Path(__file__).parent.parent

    # V√©rifier si DB existe d√©j√†sys.path.insert(0, str(project_root))

    if DATABASE_PATH.exists():

        print(f"\n‚ö†Ô∏è  Base de donn√©es existante d√©tect√©e")from backend.database.engine import SessionLocal

        response = input("   Voulez-vous la recr√©er ? (oui/non) : ").strip().lower()from backend.services.sync_service import SyncService

        if response not in ['oui', 'o', 'yes', 'y']:

            print("\n‚ùå Initialisation annul√©e")def main():

            return    parser = argparse.ArgumentParser(

                description="Importer un projet depuis Excel/YAML vers la base de donn√©es"

        # Sauvegarder ancien fichier    )

        backup_path = DATABASE_PATH.with_suffix('.db.bak')    parser.add_argument(

        DATABASE_PATH.rename(backup_path)        "config_path",

        print(f"   ‚úì Sauvegarde cr√©√©e : {backup_path}")        help="Chemin vers le fichier YAML de configuration"

        )

    # Cr√©er DB    parser.add_argument(

    print(f"\nüîß Cr√©ation des tables...")        "project_name",

    try:        nargs="?",

        init_db()        default=None,

        print(f"   ‚úì Tables cr√©√©es avec succ√®s")        help="Nom du projet (optionnel, utilise le nom du fichier config si absent)"

    except Exception as e:    )

        print(f"\n‚ùå Erreur lors de la cr√©ation : {e}")    

        sys.exit(1)    args = parser.parse_args()

        

    # V√©rifier tables cr√©√©es    # Nom projet par d√©faut

    import sqlite3    if not args.project_name:

    conn = sqlite3.connect(DATABASE_PATH)        args.project_name = Path(args.config_path).stem

    cursor = conn.cursor()    

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")    # V√©rifier existence fichier

    tables = [row[0] for row in cursor.fetchall()]    if not Path(args.config_path).exists():

    conn.close()        print(f"‚ùå Erreur : Fichier non trouv√© : {args.config_path}")

            sys.exit(1)

    print(f"\nüìä Tables cr√©√©es ({len(tables)}) :")    

    for table in tables:    # Import

        print(f"   - {table}")    db = SessionLocal()

        try:

    print(f"\n‚úÖ Initialisation termin√©e avec succ√®s!")        print(f"Import du projet '{args.project_name}' depuis {args.config_path}...")

    print(f"   Base de donn√©es pr√™te √† l'emploi : {DATABASE_PATH}")        service = SyncService(db)

        project = service.import_from_excel(args.config_path, args.project_name)

if __name__ == "__main__":        

    main()        # Stats

```        nb_teams = len(project.teams)

        nb_venues = len(project.venues)

**Points cl√©s** :        nb_matches = len(project.matches)

- **sys.path manipulation** : Permet imports depuis `backend/`        

- **V√©rification DB existante** : Demande confirmation avant √©crasement        print(f"‚úì Projet import√© avec succ√®s (ID: {project.id})")

- **Sauvegarde** : Renomme ancien fichier en `.db.bak`        print(f"  - {nb_teams} √©quipes")

- **V√©rification post-cr√©ation** : Liste les tables cr√©√©es        print(f"  - {nb_venues} gymnases")

        print(f"  - {nb_matches} matchs")

**Usage** :        

```bash    except Exception as e:

python scripts/init_db.py        print(f"‚ùå Erreur lors de l'import : {e}")

```        sys.exit(1)

    finally:

---        db.close()



### Script 2 : Import depuis YAML+Excelif __name__ == "__main__":

    main()

**üìÅ Fichier √† cr√©er** : `scripts/import_excel.py````



**Contenu complet** :**Consignes** :

- Utiliser `argparse` pour parsing arguments

```python- Argument `config_path` obligatoire

#!/usr/bin/env python3- Argument `project_name` optionnel (utilise nom fichier si absent)

"""- V√©rifier existence du fichier config

Script d'import d'un projet depuis config YAML + Excel.- Cr√©er session DB via `SessionLocal()`

- Instancier `SyncService(db)` et appeler `import_from_excel()`

Charge les donn√©es depuis les fichiers de configuration et les importe dans la DB.- Afficher stats apr√®s import (nb √©quipes, gymnases, matchs)

Utilise le service de synchronisation (SyncService) cr√©√© en T√¢che 1.6.- Fermer session dans `finally`

"""- G√©rer exceptions avec messages clairs

- Exit code 1 en cas d'erreur

import sys

from pathlib import Path**Usage** : 

import argparse- `python scripts/import_excel.py configs/config_volley.yaml`

- `python scripts/import_excel.py configs/config_volley.yaml "Volley 2025"`

# Ajouter r√©pertoire racine au sys.path

project_root = Path(__file__).parent.parent### Consignes d'organisation

sys.path.insert(0, str(project_root))- Scripts autonomes avec imports relatifs au projet

- Messages clairs et informatifs pour l'utilisateur

from backend.database.engine import SessionLocal, DATABASE_PATH- Gestion des erreurs avec exit codes appropri√©s

from backend.services.sync_service import SyncService- Documentation inline si besoin (docstrings)



def main():### Impact et liens

    # Parser arguments- Le script `init_db.py` utilise `backend/database/engine.py`

    parser = argparse.ArgumentParser(- Le script `import_excel.py` utilise `backend/services/sync_service.py`

        description="Importer un projet depuis config YAML + Excel",- Les scripts sont appel√©s manuellement ou via automatisation (CI/CD, cron)

        formatter_class=argparse.RawDescriptionHelpFormatter,

        epilog="""## √Ä faire/v√©rifier

Exemples:- Cr√©er les deux scripts avec parsing d'arguments

  # Import avec nom auto- V√©rifier le bon fonctionnement :

  python scripts/import_excel.py configs/config_volley.yaml  - `python scripts/init_db.py` ‚Üí cr√©e database/pycalendar.db

    - `python scripts/import_excel.py configs/config_test.yaml "Test"` ‚Üí importe projet

  # Import avec nom personnalis√©- Tester la gestion des erreurs :

  python scripts/import_excel.py configs/config_volley.yaml "Championnat Volley 2025"  - Fichier config manquant ‚Üí message d'erreur clair, exit 1

    - Excel invalide ‚Üí message d'erreur clair, exit 1

  # Import sans validation Excel (d√©conseill√©)- V√©rifier que les stats affich√©es sont correctes

  python scripts/import_excel.py configs/config_volley.yaml --no-validate

        """## Questions

    )Poser des questions si des points sur le parsing d'arguments, la gestion des erreurs ou l'int√©gration ne sont pas clairs.

    

    parser.add_argument(## Documentation

        "config_path",Rester concis, ne pas ajouter de documentation excessive. Utiliser des docstrings br√®ves et des messages utilisateur clairs.

        help="Chemin vers le fichier YAML de configuration"
    )
    parser.add_argument(
        "project_name",
        nargs="?",
        default=None,
        help="Nom du projet (optionnel, g√©n√©r√© automatiquement si absent)"
    )
    parser.add_argument(
        "--no-validate",
        action="store_true",
        help="D√©sactiver la validation Excel (actualiser_config.py)"
    )
    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="Afficher plus de d√©tails"
    )
    
    args = parser.parse_args()
    
    # V√©rifier que DB existe
    if not DATABASE_PATH.exists():
        print("‚ùå Base de donn√©es non trouv√©e!")
        print(f"   Ex√©cutez d'abord : python scripts/init_db.py")
        sys.exit(1)
    
    # V√©rifier que fichier YAML existe
    yaml_path = Path(args.config_path)
    if not yaml_path.exists():
        print(f"‚ùå Fichier YAML non trouv√© : {yaml_path}")
        sys.exit(1)
    
    # Afficher header
    print("=" * 70)
    print("Import d'un projet dans PyCalendar")
    print("=" * 70)
    print(f"\nüìÑ Configuration YAML : {yaml_path}")
    
    # Import
    db = SessionLocal()
    service = SyncService(db)
    
    try:
        # Importer via service (T√¢che 1.6)
        validate_excel = not args.no_validate
        
        if args.verbose:
            print(f"üîç Validation Excel : {'Activ√©e' if validate_excel else 'D√©sactiv√©e'}")
        
        print(f"\nüöÄ D√©marrage de l'import...\n")
        
        project = service.import_from_excel(
            yaml_path=str(yaml_path),
            project_name=args.project_name,
            validate_excel=validate_excel
        )
        
        # Afficher statistiques
        print(f"\n{'=' * 70}")
        print(f"‚úÖ Import termin√© avec succ√®s!")
        print(f"{'=' * 70}")
        print(f"\nüìä Statistiques du projet :")
        print(f"   ID         : {project.id}")
        print(f"   Nom        : {project.nom}")
        print(f"   Sport      : {project.sport}")
        print(f"   Semaines   : {project.nb_semaines}")
        print(f"   Semaine min: {project.semaine_min}")
        print(f"\nüìà Donn√©es import√©es :")
        print(f"   √âquipes    : {len(project.teams)}")
        print(f"   Gymnases   : {len(project.venues)}")
        print(f"   Matchs     : {len(project.matches)}")
        
        # D√©tails matchs
        nb_planifies = sum(1 for m in project.matches if m.semaine is not None)
        nb_fixes = sum(1 for m in project.matches if m.est_fixe)
        print(f"\nüéØ √âtat des matchs :")
        print(f"   Planifi√©s  : {nb_planifies}")
        print(f"   Fix√©s      : {nb_fixes}")
        print(f"   √Ä planifier: {len(project.matches) - nb_planifies}")
        
        # Fichiers config
        print(f"\nüìÅ Fichiers de configuration :")
        print(f"   YAML  : {project.config_yaml_path}")
        print(f"   Excel : {project.config_excel_path}")
        
        print(f"\nüí° Prochaines √©tapes :")
        print(f"   1. D√©marrer l'API : uvicorn backend.api.main:app --reload")
        print(f"   2. D√©marrer le frontend : cd frontend && npm run dev")
        print(f"   3. Acc√©der √† l'interface : http://localhost:5173")
        
    except FileNotFoundError as e:
        print(f"\n‚ùå Fichier non trouv√© : {e}")
        sys.exit(1)
    except ValueError as e:
        print(f"\n‚ùå Erreur de validation : {e}")
        print(f"\nüí° Suggestions :")
        print(f"   1. Ex√©cutez : python actualiser_config.py <fichier_excel>")
        print(f"   2. Corrigez les erreurs d√©tect√©es")
        print(f"   3. Relancez cet import")
        print(f"   OU")
        print(f"   4. Ajoutez --no-validate pour ignorer la validation (d√©conseill√©)")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'import : {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)
    finally:
        db.close()

if __name__ == "__main__":
    main()
```

**Points cl√©s** :
- **Arguments flexibles** : config_path obligatoire, project_name optionnel
- **Option --no-validate** : D√©sactiver validation Excel (d√©conseill√©)
- **Option --verbose** : Afficher traceback complet en cas d'erreur
- **V√©rifications** : DB existe, YAML existe
- **Statistiques d√©taill√©es** : Afficher nb √©quipes, gymnases, matchs, √©tat matchs
- **Gestion d'erreurs** : FileNotFoundError, ValueError (Excel invalide), Exception g√©n√©rale
- **Messages clairs** : Suggestions en cas d'erreur (actualiser_config.py)

**Usage** :
```bash
# Import basique
python scripts/import_excel.py configs/config_volley.yaml

# Import avec nom personnalis√©
python scripts/import_excel.py configs/config_volley.yaml "Championnat 2025"

# Import sans validation (d√©conseill√©)
python scripts/import_excel.py configs/config_volley.yaml --no-validate

# Mode verbose (debug)
python scripts/import_excel.py configs/config_volley.yaml -v
```

---

### Consignes d'organisation

**Structure des scripts** :
1. **Shebang** : `#!/usr/bin/env python3` pour ex√©cution directe
2. **Docstring** : Expliquer l'objectif du script
3. **Imports** : sys, pathlib, argparse
4. **sys.path manipulation** : Permettre imports depuis `backend/`
5. **Fonction main()** : Logique principale
6. **if __name__ == "__main__"** : Point d'entr√©e

**Gestion d'erreurs** :
- V√©rifier fichiers/DB existent avant de continuer
- Try/except autour des op√©rations critiques (import, DB)
- Messages d'erreur clairs avec suggestions de r√©solution
- sys.exit(1) en cas d'erreur fatale

**Messages utilisateur** :
- En-t√™tes clairs avec s√©parateurs (`=` * 60)
- Emojis pour visibilit√© (üìä, ‚úÖ, ‚ùå, üí°)
- Statistiques d√©taill√©es apr√®s import r√©ussi
- Prochaines √©tapes sugg√©r√©es (d√©marrer API, frontend)

---

### Impact et liens avec autres modules

**Utilisation par les d√©veloppeurs** :
```bash
# Workflow complet
python scripts/init_db.py                           # 1. Cr√©er DB
python actualiser_config.py donnees/config.xlsx    # 2. Valider Excel
python scripts/import_excel.py configs/config.yaml # 3. Importer projet
uvicorn backend.api.main:app --reload               # 4. D√©marrer API
```

**Int√©gration avec SyncService** (T√¢che 1.6) :
- Scripts appellent `SyncService.import_from_excel()`
- Passent param√®tre `validate_excel` (True par d√©faut)
- Affichent statistiques retourn√©es par le service

**Int√©gration avec actualiser_config.py** :
- Scripts sugg√®rent d'ex√©cuter actualiser_config.py en cas d'erreur validation
- Option --no-validate pour contourner (d√©conseill√©)

---

## √Ä faire/v√©rifier

**Checklist de d√©veloppement** :

1. ‚úÖ Cr√©er `scripts/init_db.py` avec :
   - sys.path manipulation
   - V√©rification DB existante avec confirmation
   - Sauvegarde ancien fichier (.db.bak)
   - Liste des tables cr√©√©es
   - Messages clairs

2. ‚úÖ Cr√©er `scripts/import_excel.py` avec :
   - argparse (config_path, project_name optionnel, --no-validate, --verbose)
   - V√©rifications (DB existe, YAML existe)
   - Appel SyncService.import_from_excel()
   - Statistiques d√©taill√©es (√©quipes, gymnases, matchs, √©tat)
   - Gestion d'erreurs (FileNotFoundError, ValueError, Exception)
   - Suggestions en cas d'erreur

3. ‚úÖ Rendre scripts ex√©cutables :
   ```bash
   chmod +x scripts/init_db.py
   chmod +x scripts/import_excel.py
   ```

**Checklist de validation** :

1. ‚úÖ **Test init_db.py** :
   ```bash
   # Suppression DB si existe
   rm -f database/pycalendar.db
   
   # Initialisation
   python scripts/init_db.py
   # Doit cr√©er database/pycalendar.db et afficher tables
   
   # V√©rifier tables
   sqlite3 database/pycalendar.db ".tables"
   # Doit afficher: matches  projects  teams  venues
   ```

2. ‚úÖ **Test import_excel.py (succ√®s)** :
   ```bash
   # Valider Excel d'abord
   python actualiser_config.py donnees/config_volley.xlsx
   
   # Import
   python scripts/import_excel.py configs/config_volley.yaml "Test Import"
   # Doit afficher statistiques compl√®tes
   
   # V√©rifier en DB
   sqlite3 database/pycalendar.db "SELECT id, nom, sport FROM projects;"
   ```

3. ‚úÖ **Test import_excel.py (erreurs)** :
   ```bash
   # Fichier YAML inexistant
   python scripts/import_excel.py configs/inexistant.yaml
   # Doit afficher erreur claire
   
   # DB non initialis√©e
   rm database/pycalendar.db
   python scripts/import_excel.py configs/config_volley.yaml
   # Doit sugg√©rer d'ex√©cuter init_db.py
   ```

4. ‚úÖ **Test options --no-validate et --verbose** :
   ```bash
   # Sans validation (d√©conseill√©)
   python scripts/import_excel.py configs/config.yaml --no-validate
   
   # Mode verbose
   python scripts/import_excel.py configs/config.yaml -v
   ```

5. ‚úÖ **Test workflow complet** :
   ```bash
   # Workflow complet depuis z√©ro
   rm -f database/pycalendar.db
   python scripts/init_db.py
   python actualiser_config.py donnees/config_volley.xlsx
   python scripts/import_excel.py configs/config_volley.yaml "Volley 2025"
   
   # V√©rifier r√©sultat
   sqlite3 database/pycalendar.db "SELECT COUNT(*) FROM matches;"
   ```

**Commandes de test** :
```bash
# Test rapide init
python scripts/init_db.py

# Test rapide import
python scripts/import_excel.py configs/config_volley.yaml

# Test avec options
python scripts/import_excel.py configs/config_volley.yaml "Test" --no-validate -v

# V√©rification DB
sqlite3 database/pycalendar.db ".schema"
```

---

## Questions

**Questions critiques √† poser si quelque chose n'est pas clair** :

1. **Workflow d'initialisation** :
   - Faut-il combiner init_db + import en un seul script ? Ou garder s√©par√©s ?
   - Faut-il ajouter une commande `scripts/reset_db.py` (supprime et recr√©e) ?

2. **Validation Excel** :
   - `actualiser_config.py` a-t-il bien un mode validation (code retour 0/1) ?
   - Faut-il int√©grer la validation directement dans import_excel.py ou garder script s√©par√© ?

3. **Gestion des conflits** :
   - Que faire si un projet avec le m√™me nom existe d√©j√† ?
   - Faut-il ajouter option `--force` pour √©craser ?
   - Faut-il ajouter option `--update` pour mettre √† jour projet existant ?

4. **Statistiques** :
   - Quelles autres stats afficher ? (nombre de poules, cr√©neaux disponibles, etc.) ?
   - Faut-il un script s√©par√© `scripts/stats.py` pour afficher stats d'un projet ?

5. **Automatisation** :
   - Faut-il un script `scripts/setup.py` qui combine init + import ?
   - Faut-il un Makefile avec commandes `make init`, `make import`, etc. ?

---

## Documentation

Rester concis : documenter uniquement les choix non √©vidents :
- **sys.path manipulation** : Expliquer pourquoi n√©cessaire (imports backend/)
- **Sauvegarde DB** : Expliquer pourquoi .db.bak (√©viter perte donn√©es)
- **Validation Excel** : Expliquer pourquoi actualiser_config.py est recommand√©
- **Workflow complet** : Documenter les √©tapes 1-2-3-4 (init, validate, import, run)

√âviter la sur-documentation des concepts Python/argparse standards.
