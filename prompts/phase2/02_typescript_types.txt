# Prompt 2.2 : Types TypeScript pour l'API# Prompt 2.2 : D√©finition des types TypeScript



## Contexte global## Contexte global

PyCalendar V2 utilise TypeScript pour un typage fort entre frontend React et backend FastAPI. Les types doivent refl√©ter exactement les sch√©mas Pydantic de l'API, incluant la double configuration (YAML + Excel).PyCalendar V2 doit garantir la coh√©rence des donn√©es entre le backend et le frontend. Les types TypeScript assurent la type-safety, facilitent le d√©veloppement (autocompl√©tion IDE) et la maintenabilit√© du code frontend.



**RAPPEL - Double configuration** :## Contexte technique

- **config_yaml_path** : Chemin vers fichier YAML (hyperparam√®tres)Cette t√¢che concerne la d√©finition des interfaces TypeScript pour les entit√©s principales (Match, Project, Team, Venue), en coh√©rence exacte avec les sch√©mas Pydantic du backend.

- **config_excel_path** : Chemin vers fichier Excel (donn√©es d√©taill√©es)

- **config_yaml_data** : Contenu JSON du YAML (sport, nb_semaines, semaine_minimum, poids contraintes, etc.)## R√©sum√© du travail pr√©c√©dent

- **config_excel_data** : M√©tadonn√©es JSON de l'Excel (nb √©quipes, gymnases, feuilles pr√©sentes)- Le backend expose des sch√©mas Pydantic (`backend/schemas/`) pour validation/s√©rialisation.

- Le projet React est initialis√© avec TypeScript et les d√©pendances principales.

## Contexte technique- Les besoins de typage pour les appels API et les composants sont identifi√©s.

Cette t√¢che cr√©e les types TypeScript pour tous les mod√®les de l'API : Project, Team, Venue, Match. Ces types seront utilis√©s par React Query, Axios et les composants React.

## Objectifs

## R√©sum√© du travail pr√©c√©dent- D√©finir des interfaces TypeScript claires et extensibles pour chaque entit√©.

- Backend expose sch√©mas Pydantic avec config_yaml_data, config_excel_data (T√¢che 1.4)- S'assurer de la correspondance exacte avec les sch√©mas Pydantic backend.

- API retourne JSON conforme aux sch√©mas ProjectResponse, TeamResponse, etc.- Utiliser les types litt√©raux et unions pour renforcer la type-safety.

- Frontend initialis√© avec Vite + TypeScript + React Query (T√¢che 2.1)- Pr√©voir l'√©volution des types pour de futurs champs.



## Objectifs## D√©tails techniques

1. Cr√©er types TypeScript pour tous les mod√®les API

2. Assurer correspondance exacte avec sch√©mas Pydantic backend### Fichiers √† cr√©er

3. Inclure types pour config_yaml_data et config_excel_dataDossier : `frontend/src/types/`

4. Cr√©er types utilitaires (MatchCreate, MatchUpdate, etc.)

5. Exporter tout depuis index.ts### Types Match

**Fichier** : `frontend/src/types/match.ts`

## D√©tails techniques

**Type union pour statut** :

### Types Project```typescript

export type MatchStatus = 'a_planifier' | 'planifie' | 'fixe' | 'termine' | 'annule'

**üìÅ Fichier √† cr√©er** : `frontend/src/types/project.ts````



**Contenu complet** :**Interface Match** (correspondance avec MatchResponse backend) :

- `id: number`

```typescript- `project_id: number`

/**- √âquipe 1 : `equipe1_nom: string`, `equipe1_institution: string`, `equipe1_genre: string`

 * Types pour les projets PyCalendar.- √âquipe 2 : `equipe2_nom: string`, `equipe2_institution: string`, `equipe2_genre: string`

 * - `poule: string`

 * IMPORTANT : config_yaml_data et config_excel_data contiennent les- Cr√©neau : `semaine: number | null`, `horaire: string | null`, `gymnase: string | null`

 * configurations compl√®tes (YAML hyperparam√®tres + Excel donn√©es).- √âtat : `est_fixe: boolean`, `statut: MatchStatus`, `priorite: number`

 */- Scores : `score_equipe1: number | null`, `score_equipe2: number | null`

- `notes: string`

// ============================================- Timestamps : `created_at: string`, `updated_at: string | null`

// Config YAML Structure

// ============================================**Interface MatchUpdate** :

- Tous champs optionnels sauf id

/**- Exemple : `semaine?: number`, `horaire?: string`, etc.

 * Contenu du fichier YAML de configuration.

 * **Interface MatchMove** (pour drag & drop) :

 * Source : configs/default.yaml, configs/config_volley.yaml- Champs requis : `semaine: number`, `horaire: string`, `gymnase: string`

 */

export interface ConfigYamlData {**Interface MatchCreate** (pour cr√©ation) :

  sport: string- Tous les champs de Match sauf `id`, `created_at`, `updated_at`

  - `project_id` requis

  semaines: {

    nb_semaines: number### Types Project

    semaine_minimum: number  // Premi√®re semaine modifiable par le solver**Fichier** : `frontend/src/types/project.ts`

  }

  **Type union pour sport** (optionnel) :

  contraintes: {```typescript

    poids: {export type SportType = 'volleyball' | 'handball' | 'autre'

      respect_repos: number```

      equilibre_domicile_exterieur: number

      respect_indisponibilites: number**Interface Project** :

      respect_preferences: number- `id: number`

      respect_semaine_min?: number- `nom: string`

      // Autres poids possibles...- `sport: string` (ou `SportType` si union type)

    }- `config_yaml_path: string | null`

  }- `config_data: any | null` (ou typer la structure config si besoin)

  - `nb_semaines: number`

  solver: {- `semaine_min: number`

    strategie: 'optimal' | 'heuristique' | 'hybride'- `created_at: string`

    temps_max_secondes: number- `updated_at: string | null`

  }

  **Interface ProjectUpdate** :

  fichiers: {- Tous champs optionnels

    donnees: string  // Chemin vers fichier Excel

  }**Interface ProjectCreate** :

}- `nom: string` (requis)

- `sport: string` (requis)

// ============================================- Autres champs optionnels avec valeurs par d√©faut

// Config Excel Metadata

// ============================================### Types Team

**Fichier** : `frontend/src/types/team.ts`

/**

 * M√©tadonn√©es du fichier Excel (structure, comptages).**Interface Team** :

 * - `id: number`

 * NE CONTIENT PAS les donn√©es brutes Excel (trop volumineuses),- `project_id: number`

 * seulement les m√©tadonn√©es utiles pour l'affichage.- `nom: string`

 */- `institution: string`

export interface ConfigExcelData {- `numero_equipe: string | null`

  nb_equipes: number- `genre: string`

  nb_gymnases: number- `poule: string`

  nb_poules: number- `horaires_preferes: string[]`

  - `lieux_preferes: string[]`

  feuilles_presentes: string[]  // Ex: ["Equipes", "Gymnases", "Indispos_Gymnases", ...]- `created_at: string`

  

  // M√©tadonn√©es suppl√©mentaires (optionnel)**Interface TeamUpdate** :

  niveaux?: string[]            // Ex: ["Minimes", "Cadets", "Juniors"]- Tous champs optionnels

  categories?: string[]         // Ex: ["Gar√ßons", "Filles"]

  institutions?: string[]       // Ex: ["Lyc√©e A", "Lyc√©e B"]**Interface TeamCreate** :

}- `project_id: number` (requis)

- Autres champs selon mod√®le

// ============================================

// Project Types### Types Venue

// ============================================**Fichier** : `frontend/src/types/venue.ts`



/****Interface Venue** :

 * Projet complet retourn√© par l'API.- `id: number`

 * - `project_id: number`

 * Correspond au sch√©ma Pydantic ProjectResponse (T√¢che 1.4).- `nom: string`

 */- `capacite: number`

export interface Project {- `horaires_disponibles: string[]`

  id: number- `created_at: string`

  nom: string

  sport: string**Interface VenueUpdate** :

  nb_semaines: number- Tous champs optionnels

  semaine_min: number  // Premi√®re semaine modifiable (depuis YAML semaine_minimum)

  **Interface VenueCreate** :

  // Configuration YAML + Excel- `project_id: number` (requis)

  config_yaml_path: string- Autres champs selon mod√®le

  config_excel_path: string

  config_yaml_data: ConfigYamlData### Fichier index pour exports centralis√©s

  config_excel_data: ConfigExcelData**Fichier** : `frontend/src/types/index.ts`

  

  // Timestamps```typescript

  created_at: string  // ISO 8601export * from './match'

  updated_at: string  // ISO 8601export * from './project'

}export * from './team'

export * from './venue'

/**```

 * Donn√©es pour cr√©er un nouveau projet.

 * ### Consignes d'organisation

 * Correspond au sch√©ma Pydantic ProjectCreate (T√¢che 1.4).- Les types doivent matcher **EXACTEMENT** les schemas Pydantic backend

 */- Utiliser union types litt√©raux pour statuts et enums (autocompl√©tion IDE, validation √† la compilation)

export interface ProjectCreate {- `Date` c√¥t√© Python devient `string` (format ISO) c√¥t√© TypeScript

  nom: string- Arrays JSON backend (`List[str]`) deviennent `string[]` TypeScript

  sport: string- Pr√©f√©rer `interface` pour objets, `type` pour unions/alias

  nb_semaines: number- Commenter bri√®vement les champs si besoin de clarification

  semaine_min: number

  ### Impact et liens

  config_yaml_path: string- Le client API (`frontend/src/api/`) utilisera ces types pour typer les requ√™tes/r√©ponses.

  config_excel_path: string- Les hooks React Query (`frontend/src/hooks/`) utiliseront ces types pour typer les donn√©es.

  config_yaml_data: ConfigYamlData- Les composants React (`frontend/src/components/`) utiliseront ces types pour props et state.

  config_excel_data: ConfigExcelData

}## √Ä faire/v√©rifier

- Cr√©er le dossier `frontend/src/types/`

/**- D√©finir toutes les interfaces pour Match, Project, Team, Venue

 * Statistiques d'un projet.- Cr√©er le fichier index.ts pour exports centralis√©s

 * - V√©rifier la correspondance exacte avec les sch√©mas Pydantic backend :

 * Correspond au sch√©ma Pydantic ProjectStats (T√¢che 1.4).  - Comparer avec `backend/schemas/match.py`, `project.py`, etc.

 */  - V√©rifier les types nullable (`| null`)

export interface ProjectStats {  - V√©rifier les arrays (`string[]`)

  project_id: number- Tester l'import : `import { Match, Project } from '@/types'`

  nb_equipes: number- V√©rifier l'autocompl√©tion IDE avec un objet Match

  nb_gymnases: number

  nb_matchs: number## Questions

  nb_matchs_planifies: numberPoser des questions si des points sur la correspondance backend/frontend, les types unions, la structure ou l'organisation ne sont pas clairs.

  nb_matchs_fixes: number

  taux_planification: number  // Pourcentage (0-100)## Documentation

}Rester concis, ne pas ajouter de documentation excessive. Commenter bri√®vement les types complexes ou ambigus si besoin.

```

**Points cl√©s** :
- **ConfigYamlData** : Structure exacte du YAML (sport, semaines, contraintes, solver)
- **ConfigExcelData** : M√©tadonn√©es Excel (comptages, feuilles pr√©sentes)
- **Project** : Correspond √† ProjectResponse Pydantic
- **semaine_min** : Attention, c'est semaine_min dans API (pas semaine_minimum comme YAML)

---

### Types Team

**üìÅ Fichier √† cr√©er** : `frontend/src/types/team.ts`

**Contenu complet** :

```typescript
/**
 * Types pour les √©quipes.
 * 
 * Source Excel : Feuille "Equipes" avec colonnes :
 * - Institution, Num√©ro √©quipe, Niveau, Cat√©gorie, Poule, Gymnase pr√©f√©r√©
 */

export interface Team {
  id: number
  project_id: number
  
  // Identit√© √©quipe (depuis feuille Equipes)
  nom: string              // Format: "{Institution} - {Num√©ro}" (ex: "Lyc√©e A - 1")
  institution: string      // Lyc√©e/Coll√®ge
  numero: number           // Num√©ro √©quipe dans l'institution
  niveau: string           // Minimes, Cadets, Juniors, etc.
  categorie: string        // Gar√ßons, Filles, Mixte
  poule: string            // P1, P2, P3, etc.
  
  // Pr√©f√©rences (depuis feuille Equipes ou Preferences_Gymnases)
  gymnase_prefere?: string | null
  
  // Timestamps
  created_at: string
}

export interface TeamCreate {
  project_id: number
  nom: string
  institution: string
  numero: number
  niveau: string
  categorie: string
  poule: string
  gymnase_prefere?: string | null
}
```

**Points cl√©s** :
- **nom** : Format "{Institution} - {Num√©ro}" g√©n√©r√© par backend
- **Source** : Feuille Excel "Equipes"
- **gymnase_prefere** : Nullable (√©quipe peut ne pas avoir de pr√©f√©rence)

---

### Types Venue

**üìÅ Fichier √† cr√©er** : `frontend/src/types/venue.ts`

**Contenu complet** :

```typescript
/**
 * Types pour les gymnases.
 * 
 * Source Excel : Feuille "Gymnases" avec colonnes :
 * - Nom, Capacit√©, Adresse
 */

export interface Venue {
  id: number
  project_id: number
  
  // Informations gymnase (depuis feuille Gymnases)
  nom: string
  capacite?: number | null
  adresse?: string | null
  
  // Timestamps
  created_at: string
}

export interface VenueCreate {
  project_id: number
  nom: string
  capacite?: number | null
  adresse?: string | null
}
```

**Points cl√©s** :
- **Source** : Feuille Excel "Gymnases"
- **capacite, adresse** : Optionnels (nullable)

---

### Types Match

**üìÅ Fichier √† cr√©er** : `frontend/src/types/match.ts`

**Contenu complet** :

```typescript
/**
 * Types pour les matchs.
 * 
 * IMPORTANT :
 * - Matchs g√©n√©r√©s automatiquement par MultiPoolGenerator (backend)
 * - Matchs fixes : d√©finis via UI web (pas depuis Excel initial)
 * - Semaine < semaine_min : Non modifiable par solver
 */

import { Team } from './team'
import { Venue } from './venue'

export interface Match {
  id: number
  project_id: number
  
  // √âquipes et lieu
  equipe_domicile_id: number
  equipe_exterieur_id: number
  gymnase_id: number | null  // Peut √™tre null si pas encore assign√©
  
  // Planification
  semaine: number | null      // Null si pas encore planifi√©
  jour_semaine?: string | null  // "Mercredi", "Samedi", etc. (optionnel)
  heure_debut?: string | null   // "14:00" format HH:MM (optionnel)
  
  // √âtat du match
  est_fixe: boolean            // True = non modifiable par solver
  
  // Relations (populated par API avec ?include_relations=true)
  equipe_domicile?: Team
  equipe_exterieur?: Team
  gymnase?: Venue
  
  // Timestamps
  created_at: string
}

export interface MatchCreate {
  project_id: number
  equipe_domicile_id: number
  equipe_exterieur_id: number
  gymnase_id?: number | null
  semaine?: number | null
  jour_semaine?: string | null
  heure_debut?: string | null
  est_fixe?: boolean
}

export interface MatchUpdate {
  gymnase_id?: number | null
  semaine?: number | null
  jour_semaine?: string | null
  heure_debut?: string | null
  est_fixe?: boolean
}

/**
 * Payload pour d√©placer un match.
 */
export interface MatchMovePayload {
  nouvelle_semaine: number
}

/**
 * Match √©tendu avec informations calcul√©es.
 * 
 * Utile pour l'affichage dans le calendrier.
 */
export interface MatchExtended extends Match {
  // Informations calcul√©es c√¥t√© frontend
  est_modifiable: boolean     // False si est_fixe ou semaine < semaine_min
  titre: string               // Ex: "Lyc√©e A - 1 vs Lyc√©e B - 2"
  couleur?: string            // Couleur pour calendrier (par poule, niveau, etc.)
}
```

**Points cl√©s** :
- **est_fixe** : Matchs fix√©s par utilisateur via UI (non modifiables)
- **semaine** : Nullable si match pas encore planifi√©
- **Relations** : Team/Venue peuvent √™tre populated par API (param ?include_relations=true)
- **MatchExtended** : Type d√©riv√© avec infos calcul√©es (est_modifiable, titre, couleur)

---

### Types utilitaires

**üìÅ Fichier √† cr√©er** : `frontend/src/types/api.ts`

**Contenu complet** :

```typescript
/**
 * Types utilitaires pour l'API.
 */

/**
 * R√©ponse API g√©n√©rique pagin√©e (si impl√©ment√© c√¥t√© backend).
 */
export interface PaginatedResponse<T> {
  items: T[]
  total: number
  page: number
  per_page: number
  total_pages: number
}

/**
 * Erreur API standardis√©e.
 */
export interface ApiError {
  detail: string
  status_code: number
}

/**
 * Options de query pour lister les matchs.
 */
export interface MatchQueryParams {
  project_id?: number
  semaine?: number
  equipe_id?: number
  gymnase_id?: number
  est_fixe?: boolean
  include_relations?: boolean  // Inclure Team/Venue dans r√©ponse
}

/**
 * Options de query pour lister les √©quipes.
 */
export interface TeamQueryParams {
  project_id?: number
  poule?: string
  niveau?: string
  categorie?: string
  institution?: string
}

/**
 * Options de query pour lister les gymnases.
 */
export interface VenueQueryParams {
  project_id?: number
}
```

**Points cl√©s** :
- **PaginatedResponse** : Si pagination impl√©ment√©e c√¥t√© backend
- **ApiError** : Structure erreur FastAPI (detail + status_code)
- **QueryParams** : Types pour filtres API (optionnel mais utile pour autocompl√©tion)

---

### Index d'export

**üìÅ Fichier √† cr√©er** : `frontend/src/types/index.ts`

**Contenu complet** :

```typescript
/**
 * Export centralis√© de tous les types.
 * 
 * Usage :
 *   import { Project, Match, Team, Venue } from '@types'
 */

// Project types
export type {
  Project,
  ProjectCreate,
  ProjectStats,
  ConfigYamlData,
  ConfigExcelData,
} from './project'

// Team types
export type {
  Team,
  TeamCreate,
} from './team'

// Venue types
export type {
  Venue,
  VenueCreate,
} from './venue'

// Match types
export type {
  Match,
  MatchCreate,
  MatchUpdate,
  MatchMovePayload,
  MatchExtended,
} from './match'

// API utilities
export type {
  PaginatedResponse,
  ApiError,
  MatchQueryParams,
  TeamQueryParams,
  VenueQueryParams,
} from './api'
```

---

### Helpers de transformation

**üìÅ Fichier √† cr√©er** : `frontend/src/utils/matchHelpers.ts`

**Contenu complet** :

```typescript
/**
 * Fonctions utilitaires pour manipuler les matchs.
 */

import { Match, MatchExtended } from '@types'

/**
 * V√©rifie si un match est modifiable.
 * 
 * Un match est NON modifiable si :
 * - Il est fix√© (est_fixe = true)
 * - Sa semaine est < semaine_min du projet
 * 
 * @param match Match √† v√©rifier
 * @param semaineMin Semaine minimum du projet
 */
export function isMatchModifiable(match: Match, semaineMin: number): boolean {
  if (match.est_fixe) return false
  if (match.semaine !== null && match.semaine < semaineMin) return false
  return true
}

/**
 * Transforme un Match en MatchExtended avec infos calcul√©es.
 * 
 * @param match Match de base
 * @param semaineMin Semaine minimum du projet
 */
export function toMatchExtended(match: Match, semaineMin: number): MatchExtended {
  // G√©n√©rer titre
  const domicile = match.equipe_domicile?.nom || `√âquipe ${match.equipe_domicile_id}`
  const exterieur = match.equipe_exterieur?.nom || `√âquipe ${match.equipe_exterieur_id}`
  const titre = `${domicile} vs ${exterieur}`
  
  // Calculer modifiable
  const est_modifiable = isMatchModifiable(match, semaineMin)
  
  // G√©n√©rer couleur (exemple : par poule de l'√©quipe domicile)
  const couleur = match.equipe_domicile?.poule 
    ? getPouleColor(match.equipe_domicile.poule)
    : '#3b82f6'  // Bleu par d√©faut
  
  return {
    ...match,
    est_modifiable,
    titre,
    couleur,
  }
}

/**
 * Attribue une couleur √† une poule (pour affichage calendrier).
 */
function getPouleColor(poule: string): string {
  const colors: Record<string, string> = {
    'P1': '#ef4444',  // Rouge
    'P2': '#3b82f6',  // Bleu
    'P3': '#10b981',  // Vert
    'P4': '#f59e0b',  // Orange
    'P5': '#8b5cf6',  // Violet
    'P6': '#ec4899',  // Rose
  }
  return colors[poule] || '#6b7280'  // Gris par d√©faut
}
```

**Points cl√©s** :
- **isMatchModifiable** : Logique m√©tier centralis√©e
- **toMatchExtended** : Enrichit Match avec titre, couleur, est_modifiable
- **getPouleColor** : Map poule ‚Üí couleur pour calendrier

---

## √Ä faire/v√©rifier

**Checklist de d√©veloppement** :

1. ‚úÖ Cr√©er `types/project.ts` avec :
   - ConfigYamlData (structure YAML compl√®te)
   - ConfigExcelData (m√©tadonn√©es Excel)
   - Project, ProjectCreate, ProjectStats

2. ‚úÖ Cr√©er `types/team.ts` avec :
   - Team (source : feuille Equipes)
   - TeamCreate

3. ‚úÖ Cr√©er `types/venue.ts` avec :
   - Venue (source : feuille Gymnases)
   - VenueCreate

4. ‚úÖ Cr√©er `types/match.ts` avec :
   - Match (avec relations optionnelles)
   - MatchCreate, MatchUpdate, MatchMovePayload
   - MatchExtended (avec est_modifiable, titre, couleur)

5. ‚úÖ Cr√©er `types/api.ts` avec :
   - PaginatedResponse, ApiError
   - MatchQueryParams, TeamQueryParams, VenueQueryParams

6. ‚úÖ Cr√©er `types/index.ts` :
   - Export centralis√© de tous les types

7. ‚úÖ Cr√©er `utils/matchHelpers.ts` avec :
   - isMatchModifiable(match, semaineMin)
   - toMatchExtended(match, semaineMin)
   - getPouleColor(poule)

**Checklist de validation** :

1. ‚úÖ **V√©rifier imports** :
   ```typescript
   import { Project, Match, Team, Venue } from '@types'
   // Doit fonctionner sans erreur
   ```

2. ‚úÖ **V√©rifier correspondance avec backend** :
   ```bash
   # Comparer avec sch√©mas Pydantic (T√¢che 1.4)
   cat backend/api/schemas.py
   
   # V√©rifier ProjectResponse = Project TypeScript
   # V√©rifier MatchResponse = Match TypeScript
   ```

3. ‚úÖ **Test TypeScript** :
   ```typescript
   // Dans un fichier .ts temporaire
   import { Project, ConfigYamlData } from '@types'
   
   const yamlData: ConfigYamlData = {
     sport: "Volleyball",
     semaines: { nb_semaines: 10, semaine_minimum: 2 },
     contraintes: { poids: { respect_repos: 10 } },
     solver: { strategie: "optimal", temps_max_secondes: 300 },
     fichiers: { donnees: "config.xlsx" }
   }
   
   const project: Project = {
     id: 1,
     nom: "Test",
     sport: "Volleyball",
     nb_semaines: 10,
     semaine_min: 2,
     config_yaml_path: "/configs/test.yaml",
     config_excel_path: "/data/test.xlsx",
     config_yaml_data: yamlData,
     config_excel_data: { nb_equipes: 10, nb_gymnases: 5, nb_poules: 2, feuilles_presentes: [] },
     created_at: new Date().toISOString(),
     updated_at: new Date().toISOString()
   }
   ```

4. ‚úÖ **Test helpers** :
   ```typescript
   import { isMatchModifiable, toMatchExtended } from '@utils/matchHelpers'
   
   const match: Match = {
     id: 1,
     project_id: 1,
     equipe_domicile_id: 1,
     equipe_exterieur_id: 2,
     gymnase_id: 1,
     semaine: 3,
     est_fixe: false,
     created_at: new Date().toISOString()
   }
   
   console.log(isMatchModifiable(match, 2))  // true (semaine 3 >= semaine_min 2)
   console.log(toMatchExtended(match, 2))    // MatchExtended avec titre, couleur
   ```

5. ‚úÖ **V√©rifier TypeScript strict** :
   ```bash
   npx tsc --noEmit
   # Ne doit afficher AUCUNE erreur
   ```

**Commandes de test rapide** :
```bash
# V√©rifier types
npx tsc --noEmit

# V√©rifier imports
grep -r "from '@types'" frontend/src/

# Lister types export√©s
cat frontend/src/types/index.ts
```

---

## Questions

**Questions critiques √† poser si quelque chose n'est pas clair** :

1. **Structure config_yaml_data** :
   - Le YAML a-t-il d'autres sections que celles list√©es (semaines, contraintes, solver, fichiers) ?
   - Y a-t-il des contraintes suppl√©mentaires (respect_horaires, respect_distance, etc.) ?
   - Faut-il typer plus strictement les valeurs (enum pour strategie, min/max pour poids) ?

2. **Structure config_excel_data** :
   - Quelles m√©tadonn√©es Excel doivent √™tre stock√©es ?
   - Faut-il inclure des infos sur les indisponibilit√©s (nb_indispos_gymnases, nb_indispos_equipes) ?
   - Faut-il des stats par feuille (ex: nb_lignes_equipes, nb_lignes_gymnases) ?

3. **Relations Match** :
   - L'API inclut-elle toujours equipe_domicile, equipe_exterieur, gymnase ?
   - Ou faut-il un param ?include_relations=true pour les charger ?
   - Faut-il des types s√©par√©s MatchWithRelations vs Match ?

4. **Matchs fixes** :
   - Les matchs fixes initiaux viennent-ils de l'Excel ou uniquement de l'UI ?
   - Y a-t-il une colonne "est_fixe" dans une feuille Excel ?
   - Ou est-ce g√©r√© 100% via l'interface web ?

5. **Champs optionnels** :
   - jour_semaine et heure_debut sont-ils toujours null initialement ?
   - Sont-ils remplis manuellement via UI ou automatiquement par solver ?
   - Faut-il des types stricts ("Mercredi" | "Samedi") ou string libre ?

6. **Couleurs calendrier** :
   - Couleurs par poule, niveau, cat√©gorie, ou institution ?
   - Faut-il des couleurs configurables (depuis config YAML) ?
   - Faut-il un syst√®me de th√®mes (clair/sombre) ?

---

## Documentation

Rester concis : documenter uniquement les choix non √©vidents :
- **ConfigYamlData** : Expliquer structure YAML (semaines, contraintes, solver)
- **config_excel_data** : Expliquer que ce sont des m√©tadonn√©es, pas les donn√©es brutes
- **semaine_min vs semaine_minimum** : Expliquer diff√©rence naming (API vs YAML)
- **MatchExtended** : Expliquer enrichissement c√¥t√© frontend (titre, couleur, est_modifiable)

√âviter la sur-documentation des concepts TypeScript standards.
