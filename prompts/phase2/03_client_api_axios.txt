# Prompt 2.3 : Client API avec Axios# Prompt 2.3 : Client API ‚Äì Axios



## Contexte global## Contexte global

PyCalendar V2 utilise Axios pour communiquer avec l'API FastAPI. Les fonctions API doivent √™tre typ√©es avec TypeScript et couvrir tous les endpoints (projects, teams, venues, matches).PyCalendar V2 utilise une API REST pour la gestion des donn√©es. Le frontend doit communiquer efficacement avec le backend via un client HTTP bien organis√©, centralis√© et facilement extensible.



**RAPPEL - Double configuration** :## Contexte technique

- **GET /projects/{id}** : Retourne config_yaml_data et config_excel_dataCette t√¢che concerne la cr√©ation d'un client Axios configur√© pour interagir avec l'API backend, en respectant la structure des endpoints et en assurant la gestion correcte des erreurs et des r√©ponses.

- **POST /projects** : Accepte config_yaml_path, config_excel_path, config_yaml_data, config_excel_data

- **GET /projects/{id}/stats** : Retourne statistiques (nb_equipes, nb_matchs, etc.)## R√©sum√© du travail pr√©c√©dent

- Le backend expose une API REST sur port 8000 (`backend/api/`).

## Contexte technique- Les types TypeScript sont d√©finis (`frontend/src/types/`).

Cette t√¢che cr√©e les fonctions API Axios typ√©es pour tous les endpoints backend. Ces fonctions seront utilis√©es par les hooks React Query (T√¢che 2.4).- Le projet React est configur√© avec proxy Vite (`/api` ‚Üí `http://localhost:8000`).



## R√©sum√© du travail pr√©c√©dent## Objectifs

- Backend expose endpoints REST complets (T√¢che 1.5)- Cr√©er un client Axios de base configur√© avec baseURL et headers.

- Types TypeScript cr√©√©s pour Project, Team, Venue, Match (T√¢che 2.2)- D√©finir les m√©thodes pour chaque endpoint API (Matches, Projects, Teams, Venues).

- Instance Axios configur√©e avec proxy /api (T√¢che 2.1)- S'assurer de la gestion correcte des erreurs et des r√©ponses.

- Pr√©voir l'extensibilit√© pour de nouveaux endpoints ou configurations.

## Objectifs

1. Cr√©er fonctions API typ√©es pour chaque endpoint## D√©tails techniques

2. Utiliser instance Axios centralis√©e

3. G√©rer erreurs de mani√®re coh√©rente### Sous-t√¢che 1 : Client Axios de base

4. Documenter param√®tres et retours**Fichier √† cr√©er** : `frontend/src/api/client.ts`

5. Exporter tout depuis services/index.ts

**Configuration requise** :

## D√©tails techniques- Cr√©er instance Axios avec `axios.create()`

- `baseURL: '/api'` (proxy Vite redirige vers backend)

### Client API Projects- Headers par d√©faut : `{ 'Content-Type': 'application/json' }`

- (Optionnel) Interceptors pour logging, gestion erreurs globale, tokens auth

**üìÅ Fichier √† cr√©er** : `frontend/src/services/projectsApi.ts`

**Exemple** :

**Contenu complet** :```typescript

import axios from 'axios'

```typescript

/**const apiClient = axios.create({

 * API client pour les projets.  baseURL: '/api',

 *   headers: {

 * Endpoints backend :    'Content-Type': 'application/json'

 * - GET    /projects                : Liste projets  }

 * - POST   /projects                : Cr√©er projet})

 * - GET    /projects/{id}           : D√©tails projet

 * - PUT    /projects/{id}           : Mettre √† jour projet// Optionnel : Interceptor pour logging

 * - DELETE /projects/{id}           : Supprimer projet (cascade)apiClient.interceptors.response.use(

 * - GET    /projects/{id}/stats     : Statistiques projet  response => response,

 */  error => {

    console.error('API Error:', error.response?.data || error.message)

import api from './api'    return Promise.reject(error)

import type { Project, ProjectCreate, ProjectStats } from '@types'  }

)

/**

 * Liste tous les projets.export default apiClient

 */```

export async function getProjects(): Promise<Project[]> {

  const response = await api.get<Project[]>('/projects')### Sous-t√¢che 2 : Endpoints Matches

  return response.data**Fichier √† cr√©er** : `frontend/src/api/endpoints/matches.ts`

}

**Import** : `import apiClient from '../client'` et types depuis `@/types/match`

/**

 * R√©cup√®re un projet par ID.**Objet export** : `matchesApi`

 * 

 * Inclut config_yaml_data et config_excel_data.**M√©thodes requises** :

 */

export async function getProject(id: number): Promise<Project> {1. **list(projectId?: number): Promise<Match[]>** :

  const response = await api.get<Project>(`/projects/${id}`)   - GET `/matches/`

  return response.data   - Query params : `{ project_id: projectId }` si fourni

}   - Retourner `response.data`



/**2. **get(id: number): Promise<Match>** :

 * Cr√©e un nouveau projet.   - GET `/matches/${id}`

 *    - Retourner `response.data`

 * IMPORTANT : config_yaml_data et config_excel_data doivent √™tre fournis.

 * Typiquement, ces donn√©es proviennent du service de synchronisation backend3. **create(match: MatchCreate): Promise<Match>** :

 * (import depuis YAML + Excel).   - POST `/matches/`

 */   - Body : match

export async function createProject(data: ProjectCreate): Promise<Project> {   - Retourner `response.data`

  const response = await api.post<Project>('/projects', data)

  return response.data4. **update(id: number, data: MatchUpdate): Promise<Match>** :

}   - PUT `/matches/${id}`

   - Body : data

/**   - Retourner `response.data`

 * Met √† jour un projet existant.

 */5. **move(id: number, creneau: MatchMove): Promise<Match>** :

export async function updateProject(   - POST `/matches/${id}/move`

  id: number,    - Body : creneau

  data: Partial<ProjectCreate>   - Retourner `response.data`

): Promise<Project> {

  const response = await api.put<Project>(`/projects/${id}`, data)6. **fix(id: number): Promise<{ message: string; match: Match }>** :

  return response.data   - POST `/matches/${id}/fix`

}   - Retourner `response.data`



/**7. **unfix(id: number): Promise<{ message: string; match: Match }>** :

 * Supprime un projet (cascade : teams, venues, matches).   - POST `/matches/${id}/unfix`

 */   - Retourner `response.data`

export async function deleteProject(id: number): Promise<void> {

  await api.delete(`/projects/${id}`)8. **delete(id: number): Promise<void>** :

}   - DELETE `/matches/${id}`

   - Pas de retour (status 204)

/**

 * R√©cup√®re les statistiques d'un projet.**Exemple structure** :

 * ```typescript

 * Retourne :import apiClient from '../client'

 * - nb_equipes, nb_gymnases, nb_matchsimport type { Match, MatchCreate, MatchUpdate, MatchMove } from '@/types/match'

 * - nb_matchs_planifies, nb_matchs_fixes

 * - taux_planification (%)export const matchesApi = {

 */  list: async (projectId?: number): Promise<Match[]> => {

export async function getProjectStats(id: number): Promise<ProjectStats> {    const params = projectId ? { project_id: projectId } : {}

  const response = await api.get<ProjectStats>(`/projects/${id}/stats`)    const { data } = await apiClient.get('/matches/', { params })

  return response.data    return data

}  },

```  

  get: async (id: number): Promise<Match> => {

**Points cl√©s** :    const { data } = await apiClient.get(`/matches/${id}`)

- **getProjects()** : Liste compl√®te (pas de pagination pour l'instant)    return data

- **getProject(id)** : Retourne config_yaml_data et config_excel_data  },

- **createProject(data)** : Accepte ProjectCreate avec configs  

- **deleteProject(id)** : Suppression en cascade (teams, venues, matches)  // ... autres m√©thodes

- **getProjectStats(id)** : Statistiques compl√®tes}

```

---

### Sous-t√¢che 3 : Endpoints Projects

### Client API Teams**Fichier √† cr√©er** : `frontend/src/api/endpoints/projects.ts`



**üìÅ Fichier √† cr√©er** : `frontend/src/services/teamsApi.ts`**M√©thodes requises** :

- `list(): Promise<Project[]>` ‚Üí GET `/projects/`

**Contenu complet** :- `get(id: number): Promise<Project>` ‚Üí GET `/projects/${id}`

- `create(project: ProjectCreate): Promise<Project>` ‚Üí POST `/projects/`

```typescript- `update(id: number, data: ProjectUpdate): Promise<Project>` ‚Üí PUT `/projects/${id}`

/**- `delete(id: number): Promise<void>` ‚Üí DELETE `/projects/${id}`

 * API client pour les √©quipes.- `getStats(id: number): Promise<ProjectStats>` ‚Üí GET `/projects/${id}/stats`

 * 

 * Endpoints backend :**Type ProjectStats** (√† d√©finir dans `@/types/project.ts`) :

 * - GET    /projects/{project_id}/teams     : Liste √©quipes d'un projet```typescript

 * - POST   /projects/{project_id}/teams     : Cr√©er √©quipeexport interface ProjectStats {

 * - GET    /teams/{id}                      : D√©tails √©quipe  nb_matchs_total: number

 * - PUT    /teams/{id}                      : Mettre √† jour √©quipe  nb_matchs_planifies: number

 * - DELETE /teams/{id}                      : Supprimer √©quipe  nb_matchs_fixes: number

 */  nb_matchs_a_planifier: number

}

import api from './api'```

import type { Team, TeamCreate, TeamQueryParams } from '@types'

### Sous-t√¢che 4 : Endpoints Teams et Venues

/****Fichiers √† cr√©er** : `frontend/src/api/endpoints/teams.ts`, `venues.ts`

 * Liste les √©quipes d'un projet.

 * **M√©thodes CRUD standard** :

 * Filtres optionnels : poule, niveau, categorie, institution- list, get, create, update, delete

 */- Filtrage par project_id si pertinent (query param)

export async function getTeams(

  projectId: number, ### Fichier index pour exports centralis√©s

  params?: TeamQueryParams**Fichier √† cr√©er** : `frontend/src/api/index.ts`

): Promise<Team[]> {

  const response = await api.get<Team[]>(`/projects/${projectId}/teams`, { params })```typescript

  return response.dataexport { default as apiClient } from './client'

}export * from './endpoints/matches'

export * from './endpoints/projects'

/**export * from './endpoints/teams'

 * R√©cup√®re une √©quipe par ID.export * from './endpoints/venues'

 */```

export async function getTeam(id: number): Promise<Team> {

  const response = await api.get<Team>(`/teams/${id}`)### Consignes d'organisation

  return response.data- Destructurer `{ data }` depuis r√©ponse Axios pour typage propre

}- Typer tous les retours avec `Promise<T>`

- Utiliser query params pour filtrage (ex: `project_id`)

/**- G√©rer les erreurs au niveau global (interceptors) ou sp√©cifique (try/catch dans hooks)

 * Cr√©e une nouvelle √©quipe.- baseURL relatif `/api` fonctionne gr√¢ce au proxy Vite en dev

 * - En production, utiliser variable d'environnement (`import.meta.env.VITE_API_URL`)

 * Note : G√©n√©ralement cr√©√©e automatiquement lors de l'import Excel,

 * rarement manuellement.### Impact et liens

 */- Les hooks React Query (`frontend/src/hooks/`) utiliseront ces fonctions API.

export async function createTeam(data: TeamCreate): Promise<Team> {- Les types TypeScript (`frontend/src/types/`) assurent la coh√©rence.

  const response = await api.post<Team>(`/projects/${data.project_id}/teams`, data)- Le proxy Vite (`vite.config.ts`) redirige `/api` vers le backend.

  return response.data

}## √Ä faire/v√©rifier

- Cr√©er le client Axios de base avec configuration

/**- Impl√©menter tous les endpoints pour Matches, Projects, Teams, Venues

 * Met √† jour une √©quipe existante.- Cr√©er le fichier index.ts pour exports centralis√©s

 */- Tester les appels API :

export async function updateTeam(  - D√©marrer backend : `uvicorn backend.api.main:app --reload`

  id: number,   - D√©marrer frontend : `npm run dev`

  data: Partial<TeamCreate>  - Importer et appeler : `import { matchesApi } from '@/api'` puis `matchesApi.list()`

): Promise<Team> {  - V√©rifier les r√©ponses dans la console navigateur

  const response = await api.put<Team>(`/teams/${id}`, data)- Tester la gestion des erreurs (endpoint invalide, 404, etc.)

  return response.data

}## Questions

Poser des questions si des points sur la configuration Axios, les interceptors, le typage des r√©ponses ou l'int√©gration ne sont pas clairs.

/**

 * Supprime une √©quipe.## Documentation

 */Rester concis, ne pas ajouter de documentation excessive. Commenter bri√®vement les m√©thodes complexes ou les interceptors si besoin.

export async function deleteTeam(id: number): Promise<void> {
  await api.delete(`/teams/${id}`)
}
```

**Points cl√©s** :
- **getTeams(projectId, params)** : Filtrage par poule, niveau, cat√©gorie, institution
- **Source** : √âquipes g√©n√©r√©es depuis feuille Excel "Equipes"
- **Cr√©ation manuelle** : Rare, g√©n√©ralement import√©es via Excel

---

### Client API Venues

**üìÅ Fichier √† cr√©er** : `frontend/src/services/venuesApi.ts`

**Contenu complet** :

```typescript
/**
 * API client pour les gymnases.
 * 
 * Endpoints backend :
 * - GET    /projects/{project_id}/venues     : Liste gymnases d'un projet
 * - POST   /projects/{project_id}/venues     : Cr√©er gymnase
 * - GET    /venues/{id}                      : D√©tails gymnase
 * - PUT    /venues/{id}                      : Mettre √† jour gymnase
 * - DELETE /venues/{id}                      : Supprimer gymnase
 */

import api from './api'
import type { Venue, VenueCreate, VenueQueryParams } from '@types'

/**
 * Liste les gymnases d'un projet.
 */
export async function getVenues(
  projectId: number, 
  params?: VenueQueryParams
): Promise<Venue[]> {
  const response = await api.get<Venue[]>(`/projects/${projectId}/venues`, { params })
  return response.data
}

/**
 * R√©cup√®re un gymnase par ID.
 */
export async function getVenue(id: number): Promise<Venue> {
  const response = await api.get<Venue>(`/venues/${id}`)
  return response.data
}

/**
 * Cr√©e un nouveau gymnase.
 * 
 * Note : G√©n√©ralement cr√©√© automatiquement lors de l'import Excel,
 * rarement manuellement.
 */
export async function createVenue(data: VenueCreate): Promise<Venue> {
  const response = await api.post<Venue>(`/projects/${data.project_id}/venues`, data)
  return response.data
}

/**
 * Met √† jour un gymnase existant.
 */
export async function updateVenue(
  id: number, 
  data: Partial<VenueCreate>
): Promise<Venue> {
  const response = await api.put<Venue>(`/venues/${id}`, data)
  return response.data
}

/**
 * Supprime un gymnase.
 */
export async function deleteVenue(id: number): Promise<void> {
  await api.delete(`/venues/${id}`)
}
```

**Points cl√©s** :
- **getVenues(projectId)** : Filtre par projet uniquement
- **Source** : Gymnases g√©n√©r√©s depuis feuille Excel "Gymnases"
- **Cr√©ation manuelle** : Rare, g√©n√©ralement import√©s via Excel

---

### Client API Matches

**üìÅ Fichier √† cr√©er** : `frontend/src/services/matchesApi.ts`

**Contenu complet** :

```typescript
/**
 * API client pour les matchs.
 * 
 * Endpoints backend :
 * - GET    /projects/{project_id}/matches     : Liste matchs d'un projet
 * - POST   /projects/{project_id}/matches     : Cr√©er match
 * - GET    /matches/{id}                      : D√©tails match
 * - PUT    /matches/{id}                      : Mettre √† jour match
 * - DELETE /matches/{id}                      : Supprimer match
 * - POST   /matches/{id}/move                 : D√©placer match vers nouvelle semaine
 * - POST   /matches/{id}/fix                  : Fixer match (non modifiable)
 * - POST   /matches/{id}/unfix                : D√©fixer match (modifiable)
 */

import api from './api'
import type { 
  Match, 
  MatchCreate, 
  MatchUpdate, 
  MatchMovePayload,
  MatchQueryParams 
} from '@types'

/**
 * Liste les matchs d'un projet.
 * 
 * Filtres optionnels :
 * - semaine : Matchs d'une semaine sp√©cifique
 * - equipe_id : Matchs d'une √©quipe (domicile ou ext√©rieur)
 * - gymnase_id : Matchs dans un gymnase
 * - est_fixe : Matchs fixes ou non
 * - include_relations : Inclure equipe_domicile, equipe_exterieur, gymnase
 */
export async function getMatches(
  projectId: number, 
  params?: MatchQueryParams
): Promise<Match[]> {
  const response = await api.get<Match[]>(`/projects/${projectId}/matches`, { params })
  return response.data
}

/**
 * R√©cup√®re un match par ID.
 * 
 * @param includeRelations Inclure equipe_domicile, equipe_exterieur, gymnase
 */
export async function getMatch(
  id: number, 
  includeRelations = true
): Promise<Match> {
  const response = await api.get<Match>(`/matches/${id}`, {
    params: { include_relations: includeRelations }
  })
  return response.data
}

/**
 * Cr√©e un nouveau match.
 * 
 * Note : G√©n√©ralement cr√©√© automatiquement par MultiPoolGenerator,
 * rarement manuellement.
 */
export async function createMatch(data: MatchCreate): Promise<Match> {
  const response = await api.post<Match>(`/projects/${data.project_id}/matches`, data)
  return response.data
}

/**
 * Met √† jour un match existant.
 * 
 * Permet de modifier :
 * - gymnase_id
 * - semaine, jour_semaine, heure_debut
 * - est_fixe
 */
export async function updateMatch(
  id: number, 
  data: MatchUpdate
): Promise<Match> {
  const response = await api.put<Match>(`/matches/${id}`, data)
  return response.data
}

/**
 * Supprime un match.
 */
export async function deleteMatch(id: number): Promise<void> {
  await api.delete(`/matches/${id}`)
}

/**
 * D√©place un match vers une nouvelle semaine.
 * 
 * Validation backend :
 * - Match non fix√© (est_fixe = false)
 * - Semaine actuelle >= semaine_min du projet
 * 
 * @throws Error si match non modifiable
 */
export async function moveMatch(
  id: number, 
  payload: MatchMovePayload
): Promise<Match> {
  const response = await api.post<Match>(`/matches/${id}/move`, payload)
  return response.data
}

/**
 * Fixe un match (rend non modifiable par le solver).
 * 
 * Un match fix√© :
 * - Ne peut plus √™tre d√©plac√© par le solver
 * - Peut toujours √™tre modifi√© manuellement via updateMatch
 */
export async function fixMatch(id: number): Promise<Match> {
  const response = await api.post<Match>(`/matches/${id}/fix`)
  return response.data
}

/**
 * D√©fixe un match (rend modifiable par le solver).
 */
export async function unfixMatch(id: number): Promise<Match> {
  const response = await api.post<Match>(`/matches/${id}/unfix`)
  return response.data
}
```

**Points cl√©s** :
- **getMatches(projectId, params)** : Filtres multiples (semaine, √©quipe, gymnase, est_fixe)
- **include_relations** : Charger √©quipes et gymnase dans la r√©ponse
- **moveMatch(id, payload)** : Endpoint sp√©cial pour d√©placement (validation backend)
- **fixMatch/unfixMatch** : Gestion matchs fixes (UI web, pas Excel)

---

### Export centralis√©

**üìÅ Fichier √† cr√©er** : `frontend/src/services/index.ts`

**Contenu complet** :

```typescript
/**
 * Export centralis√© des API clients.
 * 
 * Usage :
 *   import { projectsApi, matchesApi } from '@services'
 *   
 *   const projects = await projectsApi.getProjects()
 *   const matches = await matchesApi.getMatches(projectId)
 */

import * as projectsApi from './projectsApi'
import * as teamsApi from './teamsApi'
import * as venuesApi from './venuesApi'
import * as matchesApi from './matchesApi'

export {
  projectsApi,
  teamsApi,
  venuesApi,
  matchesApi,
}

// Export types si besoin
export type { AxiosError } from 'axios'
```

---

### Gestion d'erreurs

**üìÅ Fichier √† cr√©er** : `frontend/src/utils/apiHelpers.ts`

**Contenu complet** :

```typescript
/**
 * Utilitaires pour gestion des erreurs API.
 */

import { AxiosError } from 'axios'
import type { ApiError } from '@types'

/**
 * Extrait le message d'erreur depuis une erreur Axios.
 * 
 * FastAPI retourne : { detail: "Message d'erreur" }
 */
export function getErrorMessage(error: unknown): string {
  if (error instanceof AxiosError) {
    const apiError = error.response?.data as ApiError | undefined
    if (apiError?.detail) {
      return apiError.detail
    }
    return error.message
  }
  
  if (error instanceof Error) {
    return error.message
  }
  
  return 'Une erreur inconnue est survenue'
}

/**
 * V√©rifie si l'erreur est une erreur 404 (Not Found).
 */
export function isNotFoundError(error: unknown): boolean {
  if (error instanceof AxiosError) {
    return error.response?.status === 404
  }
  return false
}

/**
 * V√©rifie si l'erreur est une erreur 400 (Bad Request).
 */
export function isBadRequestError(error: unknown): boolean {
  if (error instanceof AxiosError) {
    return error.response?.status === 400
  }
  return false
}

/**
 * V√©rifie si l'erreur est une erreur de validation (422 Unprocessable Entity).
 */
export function isValidationError(error: unknown): boolean {
  if (error instanceof AxiosError) {
    return error.response?.status === 422
  }
  return false
}
```

**Points cl√©s** :
- **getErrorMessage(error)** : Extrait message depuis FastAPI { detail: "..." }
- **isNotFoundError** : V√©rifier 404 (ressource non trouv√©e)
- **isBadRequestError** : V√©rifier 400 (match non modifiable, etc.)
- **isValidationError** : V√©rifier 422 (donn√©es invalides)

---

### Exemple d'utilisation

**üìÅ Fichier exemple** : `frontend/src/examples/apiUsage.ts`

**Contenu** :

```typescript
import { projectsApi, matchesApi } from '@services'
import { getErrorMessage } from '@utils/apiHelpers'

async function exampleUsage() {
  try {
    // 1. Lister projets
    const projects = await projectsApi.getProjects()
    console.log('Projets:', projects)
    
    // 2. R√©cup√©rer d√©tails projet (avec config YAML + Excel)
    const project = await projectsApi.getProject(1)
    console.log('Config YAML:', project.config_yaml_data)
    console.log('Config Excel:', project.config_excel_data)
    
    // 3. R√©cup√©rer stats
    const stats = await projectsApi.getProjectStats(1)
    console.log('Stats:', stats)
    
    // 4. Lister matchs d'une semaine
    const matches = await matchesApi.getMatches(1, { 
      semaine: 3, 
      include_relations: true 
    })
    console.log('Matchs semaine 3:', matches)
    
    // 5. D√©placer un match
    const movedMatch = await matchesApi.moveMatch(1, { nouvelle_semaine: 5 })
    console.log('Match d√©plac√©:', movedMatch)
    
    // 6. Fixer un match
    const fixedMatch = await matchesApi.fixMatch(1)
    console.log('Match fix√©:', fixedMatch)
    
  } catch (error) {
    const message = getErrorMessage(error)
    console.error('Erreur API:', message)
  }
}
```

---

## √Ä faire/v√©rifier

**Checklist de d√©veloppement** :

1. ‚úÖ Cr√©er `services/projectsApi.ts` avec :
   - getProjects(), getProject(id), createProject(data)
   - updateProject(id, data), deleteProject(id)
   - getProjectStats(id)

2. ‚úÖ Cr√©er `services/teamsApi.ts` avec :
   - getTeams(projectId, params), getTeam(id)
   - createTeam(data), updateTeam(id, data), deleteTeam(id)

3. ‚úÖ Cr√©er `services/venuesApi.ts` avec :
   - getVenues(projectId, params), getVenue(id)
   - createVenue(data), updateVenue(id, data), deleteVenue(id)

4. ‚úÖ Cr√©er `services/matchesApi.ts` avec :
   - getMatches(projectId, params), getMatch(id, includeRelations)
   - createMatch(data), updateMatch(id, data), deleteMatch(id)
   - moveMatch(id, payload), fixMatch(id), unfixMatch(id)

5. ‚úÖ Cr√©er `services/index.ts` :
   - Export centralis√© projectsApi, teamsApi, venuesApi, matchesApi

6. ‚úÖ Cr√©er `utils/apiHelpers.ts` avec :
   - getErrorMessage(error)
   - isNotFoundError, isBadRequestError, isValidationError

**Checklist de validation** :

1. ‚úÖ **V√©rifier imports** :
   ```typescript
   import { projectsApi, matchesApi } from '@services'
   import { getErrorMessage } from '@utils/apiHelpers'
   // Pas d'erreur TypeScript
   ```

2. ‚úÖ **Test avec backend running** :
   ```bash
   # Terminal 1 : Backend
   uvicorn backend.api.main:app --reload
   
   # Terminal 2 : Frontend
   cd frontend && npm run dev
   ```

3. ‚úÖ **Test dans console navigateur** :
   ```javascript
   // Ouvrir http://localhost:5173
   // Console navigateur :
   
   const { projectsApi } = await import('/src/services/index.ts')
   const projects = await projectsApi.getProjects()
   console.log(projects)
   ```

4. ‚úÖ **Test gestion d'erreurs** :
   ```javascript
   const { matchesApi } = await import('/src/services/index.ts')
   const { getErrorMessage } = await import('/src/utils/apiHelpers.ts')
   
   try {
     await matchesApi.moveMatch(999, { nouvelle_semaine: 5 })
   } catch (error) {
     console.log(getErrorMessage(error))  // Doit afficher message FastAPI
   }
   ```

5. ‚úÖ **V√©rifier TypeScript strict** :
   ```bash
   npx tsc --noEmit
   # Aucune erreur
   ```

**Commandes de test rapide** :
```bash
# V√©rifier types
npx tsc --noEmit

# V√©rifier imports services
grep -r "from '@services'" frontend/src/

# Lancer frontend + backend
uvicorn backend.api.main:app --reload &
cd frontend && npm run dev
```

---

## Questions

**Questions critiques √† poser si quelque chose n'est pas clair** :

1. **Pagination** :
   - Faut-il impl√©menter la pagination pour getProjects, getTeams, getMatches ?
   - Ou liste compl√®te acceptable pour V2 ?
   - Si pagination : offset/limit ou cursor-based ?

2. **Filtres avanc√©s** :
   - Faut-il des filtres combin√©s (ex: niveau ET cat√©gorie) ?
   - Faut-il un endpoint de recherche globale (/search?q=...) ?
   - Faut-il trier les r√©sultats (sort_by=nom, sort_order=asc) ?

3. **Cache et invalidation** :
   - Apr√®s moveMatch, faut-il invalider cache de getMatches ?
   - Apr√®s createProject, faut-il invalider cache de getProjects ?
   - Ces invalidations seront g√©r√©es par React Query (T√¢che 2.4) ?

4. **Relations** :
   - include_relations doit-il √™tre true par d√©faut ?
   - Faut-il des endpoints s√©par√©s (/matches/{id}/with_relations) ?
   - Y a-t-il un risque de performance avec trop de relations ?

5. **Erreurs sp√©cifiques** :
   - Faut-il des types d'erreurs personnalis√©s (MatchNotModifiableError, etc.) ?
   - Faut-il un interceptor global pour g√©rer 401 (non authentifi√©) ?
   - Faut-il un retry automatique sur erreurs 5xx ?

6. **Optimistic updates** :
   - Faut-il retourner l'objet modifi√© depuis le backend (d√©j√† fait) ?
   - Ou faire des optimistic updates c√¥t√© frontend (React Query) ?

---

## Documentation

Rester concis : documenter uniquement les choix non √©vidents :
- **moveMatch** : Expliquer validation backend (est_fixe, semaine_min)
- **include_relations** : Expliquer qu'il charge √©quipes/gymnase dans r√©ponse
- **getErrorMessage** : Expliquer extraction depuis FastAPI { detail: "..." }
- **Proxy /api** : Rappeler redirection Vite vers http://localhost:8000

√âviter la sur-documentation des concepts Axios/REST standards.
