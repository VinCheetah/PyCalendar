# Prompt 2.5 : Composant Calendrier FullCalendar# Prompt 2.5 : Composant Calendrier ‚Äì FullCalendar



## Contexte global## Contexte global

PyCalendar V2 affiche les matchs planifi√©s dans un calendrier interactif avec FullCalendar. Les utilisateurs peuvent glisser-d√©poser les matchs entre semaines, fixer/d√©fixer des matchs, et voir les d√©tails.PyCalendar V2 doit proposer une interface utilisateur claire pour visualiser et manipuler le calendrier des matchs. Le composant calendrier est central pour l'exp√©rience utilisateur, permettant l'affichage, le drag & drop et la distinction visuelle des matchs (fixes vs modifiables).



**RAPPEL - Double configuration** :## Contexte technique

- **semaine_minimum** (YAML) ‚Üí **semaine_min** (API/DB) : Premi√®re semaine modifiableCette t√¢che concerne la cr√©ation d'un composant React bas√© sur FullCalendar, int√©grant la gestion des matchs fixes, du drag & drop, de la coloration des √©v√©nements et du calcul des dates √† partir de semaines/horaires.

- **Matchs fixes** : D√©finis via UI web (pas Excel), est_fixe = true

- **Matchs non modifiables** : est_fixe = true OU semaine < semaine_min## R√©sum√© du travail pr√©c√©dent

- Les hooks React Query sont en place (`frontend/src/hooks/`).

## Contexte technique- Le client API est op√©rationnel (`frontend/src/api/`).

Cette t√¢che cr√©e le composant calendrier principal avec FullCalendar, gestion du drag & drop, modale de d√©tails, et int√©gration avec les hooks React Query.- Les types TypeScript sont d√©finis (`frontend/src/types/`).

- FullCalendar est install√© avec plugins n√©cessaires.

## R√©sum√© du travail pr√©c√©dent

- Hooks React Query cr√©√©s (useMatches, useMoveMatch, useFixMatch, etc.) - T√¢che 2.4## Objectifs

- Types MatchExtended avec est_modifiable, titre, couleur - T√¢che 2.2- Cr√©er un composant calendrier clair, modulaire et facilement extensible.

- Helper toMatchExtended() pour enrichir matchs - T√¢che 2.2- Impl√©menter la transformation des matchs en √©v√©nements FullCalendar.

- G√©rer le drag & drop avec validation (matchs fixes non d√©pla√ßables).

## Objectifs- Assurer la coloration visuelle (rouge = fix√©, bleu = normal, vert = termin√©).

1. Cr√©er composant Calendar avec FullCalendar- Calculer correctement les dates √† partir de semaine + horaire.

2. Impl√©menter drag & drop pour d√©placer matchs

3. Afficher modale de d√©tails au clic## D√©tails techniques

4. G√©rer matchs fixes (badge, couleur)

5. Respecter contrainte semaine_min### Fichier √† cr√©er

`frontend/src/components/calendar/Calendar.tsx`

## D√©tails techniques

### Props interface

### Composant Calendar principal```typescript

interface CalendarProps {

**üìÅ Fichier √† cr√©er** : `frontend/src/components/Calendar/Calendar.tsx`  matches: Match[]

  onMatchDrop?: (matchId: number, newCreneau: MatchMove) => void

**Contenu complet** :  onMatchClick?: (match: Match) => void

}

```typescript```

/**

 * Composant calendrier principal avec FullCalendar.### Imports requis

 * ```typescript

 * Fonctionnalit√©s :import FullCalendar from '@fullcalendar/react'

 * - Affichage matchs par semaineimport dayGridPlugin from '@fullcalendar/daygrid'

 * - Drag & drop pour d√©placer matchs (si modifiable)import timeGridPlugin from '@fullcalendar/timegrid'

 * - Clic pour voir d√©tails + fixer/d√©fixerimport interactionPlugin from '@fullcalendar/interaction'

 * - Couleurs par pouleimport type { EventDropArg, EventClickArg } from '@fullcalendar/core'

 * - Badge "Fix√©" sur matchs fixesimport type { Match, MatchMove } from '@/types'

 */

// CSS FullCalendar

import { useState, useMemo } from 'react'import '@fullcalendar/core/main.css'

import FullCalendar from '@fullcalendar/react'import '@fullcalendar/daygrid/main.css'

import dayGridPlugin from '@fullcalendar/daygrid'import '@fullcalendar/timegrid/main.css'

import interactionPlugin from '@fullcalendar/interaction'```

import type { EventInput, EventDropArg, EventClickArg } from '@fullcalendar/core'

### Fonctions auxiliaires

import { useMatches, useMoveMatch } from '@hooks'

import { toMatchExtended, isMatchModifiable } from '@utils/matchHelpers'1. **calculateDate(semaine: number, horaire: string, referenceDate?: Date): Date** :

import { getErrorMessage } from '@utils/apiHelpers'   - Date de r√©f√©rence par d√©faut : 1er janvier 2025 (ou configurable via props)

import type { Match, MatchExtended } from '@types'   - Calculer : `referenceDate + (semaine - 1) * 7 jours`

import EventDetailsModal from './EventDetailsModal'   - Parser horaire format "HH:MM" (ex: "09:00")

   - Setter heures/minutes sur la date calcul√©e

interface CalendarProps {   - Retourner la Date compl√®te

  projectId: number

  semaineMin: number  // Depuis project.semaine_min2. **getWeekNumber(date: Date, referenceDate?: Date): number** :

}   - Calculer diff√©rence en millisecondes entre date et referenceDate

   - Convertir en jours : `Math.floor(diff / (1000 * 60 * 60 * 24))`

export default function Calendar({ projectId, semaineMin }: CalendarProps) {   - Calculer semaine : `Math.floor(jours / 7) + 1`

  const [selectedMatch, setSelectedMatch] = useState<MatchExtended | null>(null)   - Retourner le num√©ro de semaine

  const [isModalOpen, setIsModalOpen] = useState(false)

3. **parseTime(horaire: string): { hours: number, minutes: number }** :

  // R√©cup√©rer matchs avec relations (√©quipes, gymnase)   - Split sur ":" ‚Üí ["09", "00"]

  const { data: matches, isLoading } = useMatches(projectId, {    - Retourner `{ hours: parseInt(parts[0]), minutes: parseInt(parts[1]) }`

    include_relations: true 

  })### Transformation matchs ‚Üí √©v√©nements FullCalendar

```typescript

  // Mutation pour d√©placer matchconst events = matches

  const moveMatch = useMoveMatch()  .filter(m => m.semaine !== null && m.horaire !== null)

  .map(match => ({

  // Transformer matchs en √©v√©nements FullCalendar    id: match.id.toString(),

  const events: EventInput[] = useMemo(() => {    title: `${match.equipe1_nom} vs ${match.equipe2_nom}`,

    if (!matches) return []    start: calculateDate(match.semaine!, match.horaire!),

    backgroundColor: getMatchColor(match),

    return matches    editable: !match.est_fixe && match.statut !== 'termine',

      .filter(m => m.semaine !== null)  // Seulement matchs planifi√©s    extendedProps: { match }

      .map(match => {  }))

        const extended = toMatchExtended(match, semaineMin)

        function getMatchColor(match: Match): string {

        return {  if (match.est_fixe || match.statut === 'fixe') return '#ef4444' // rouge

          id: match.id.toString(),  if (match.statut === 'termine') return '#22c55e' // vert

          title: extended.titre,  return '#3b82f6' // bleu

          start: getSemaineDate(match.semaine!),  // Date d√©but semaine}

          backgroundColor: extended.couleur,```

          borderColor: extended.couleur,

          textColor: '#ffffff',### Handlers FullCalendar

          editable: extended.est_modifiable,  // Drag & drop seulement si modifiable

          extendedProps: {1. **handleEventDrop(info: EventDropArg)** :

            match: extended,   - R√©cup√©rer match : `const match = info.event.extendedProps.match as Match`

          },   - V√©rifier si modifiable : `if (!match.est_modifiable()) { info.revert(); return }`

        }   - Calculer nouveau cr√©neau depuis `info.event.start` :

      })     - `semaine = getWeekNumber(info.event.start!)`

  }, [matches, semaineMin])     - `horaire = format(info.event.start!, 'HH:mm')` (utiliser date-fns ou √©quivalent)

     - `gymnase = match.gymnase!` (conserver gymnase actuel ou permettre changement)

  // G√©rer drop d'un √©v√©nement (d√©placement match)   - Appeler `onMatchDrop?.(match.id, { semaine, horaire, gymnase })`

  const handleEventDrop = async (info: EventDropArg) => {   - En cas d'erreur : `info.revert()` pour annuler le d√©placement

    const match = info.event.extendedProps.match as MatchExtended

    const newDate = info.event.start!2. **handleEventClick(info: EventClickArg)** :

    const nouvelleSemaine = getWeekNumber(newDate)   - R√©cup√©rer match : `const match = info.event.extendedProps.match as Match`

   - Appeler `onMatchClick?.(match)`

    try {

      await moveMatch.mutateAsync({### Composant FullCalendar

        id: match.id,```typescript

        payload: { nouvelle_semaine: nouvelleSemaine },<FullCalendar

      })  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}

    } catch (error) {  initialView="timeGridWeek"

      // Revert position en cas d'erreur  headerToolbar={{

      info.revert()    left: 'prev,next today',

      alert(`Impossible de d√©placer le match : ${getErrorMessage(error)}`)    center: 'title',

    }    right: 'dayGridMonth,timeGridWeek,timeGridDay'

  }  }}

  events={events}

  // G√©rer clic sur √©v√©nement (ouvrir modale)  editable={true}

  const handleEventClick = (info: EventClickArg) => {  eventDrop={handleEventDrop}

    const match = info.event.extendedProps.match as MatchExtended  eventClick={handleEventClick}

    setSelectedMatch(match)  slotMinTime="07:00:00"

    setIsModalOpen(true)  slotMaxTime="23:00:00"

  }  locale="fr"

  height="auto"

  // Fermer modale/>

  const handleCloseModal = () => {```

    setIsModalOpen(false)

    setSelectedMatch(null)### Consignes d'organisation

  }- Date de r√©f√©rence coh√©rente (stocker en config ou props, ex: `referenceDate={new Date(2025, 0, 1)}`)

- Format horaire backend : "HH:MM" 24h

  if (isLoading) {- `editable` per-event emp√™che drag si fix√©

    return (- G√©rer timezone (UTC ou locale selon besoin du projet)

      <div className="flex items-center justify-center h-96">- Import CSS FullCalendar obligatoire pour rendu correct

        <div className="text-lg text-gray-600">Chargement du calendrier...</div>- Utiliser `info.revert()` pour annuler drag si erreur

      </div>- Pr√©voir feedback visuel pendant drag (FullCalendar le g√®re par d√©faut)

    )

  }### Impact et liens

- La page CalendarPage (`frontend/src/pages/CalendarPage.tsx`) utilisera ce composant.

  return (- Les hooks (`frontend/src/hooks/useMatches.ts`) fourniront les donn√©es matches.

    <div className="p-6 bg-white rounded-lg shadow">- Le handler `onMatchDrop` appellera le hook `useMoveMatch()`.

      <FullCalendar

        plugins={[dayGridPlugin, interactionPlugin]}## √Ä faire/v√©rifier

        initialView="dayGridMonth"- Cr√©er le composant Calendar avec toutes les fonctions auxiliaires

        headerToolbar={{- Impl√©menter la transformation matchs ‚Üí √©v√©nements

          left: 'prev,next today',- Impl√©menter les handlers eventDrop et eventClick

          center: 'title',- Tester l'affichage avec donn√©es de test :

          right: 'dayGridMonth,dayGridWeek',  - Matchs avec cr√©neaux affich√©s aux bonnes dates/heures

        }}  - Matchs fixes en rouge, normaux en bleu, termin√©s en vert

        locale="fr"- Tester le drag & drop :

        firstDay={1}  // Lundi  - Match normal : d√©pla√ßable, appelle onMatchDrop

        events={events}  - Match fix√© : non d√©pla√ßable (editable=false)

        editable={true}  - Erreur API : revenir √† position initiale (info.revert())

        eventDrop={handleEventDrop}- V√©rifier le calcul des dates/semaines (coh√©rence aller-retour)

        eventClick={handleEventClick}

        eventContent={renderEventContent}## Questions

        height="auto"Poser des questions si des points sur FullCalendar, le calcul des dates, la gestion du drag & drop, les couleurs ou l'int√©gration ne sont pas clairs.

        eventTimeFormat={{

          hour: '2-digit',## Documentation

          minute: '2-digit',Rester concis, ne pas ajouter de documentation excessive. Commenter bri√®vement les fonctions de calcul de dates et la logique de coloration si besoin.

          meridiem: false,
        }}
      />

      {/* Modale d√©tails match */}
      {selectedMatch && (
        <EventDetailsModal
          match={selectedMatch}
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          semaineMin={semaineMin}
        />
      )}
    </div>
  )
}

/**
 * Rendu personnalis√© d'un √©v√©nement (avec badge "Fix√©").
 */
function renderEventContent(eventInfo: any) {
  const match = eventInfo.event.extendedProps.match as MatchExtended

  return (
    <div className="p-1 truncate">
      <div className="font-medium text-sm">{eventInfo.event.title}</div>
      {match.est_fixe && (
        <span className="inline-block px-1 py-0.5 text-xs bg-red-500 text-white rounded">
          Fix√©
        </span>
      )}
    </div>
  )
}

/**
 * Calcule la date de d√©but de semaine √† partir du num√©ro de semaine.
 * 
 * IMPORTANT : Adapter selon le calendrier r√©el du championnat.
 * Exemple : Semaine 1 = 14 octobre 2025
 */
function getSemaineDate(semaine: number): Date {
  // Exemple : Semaine 1 commence le 14 octobre 2025
  const baseDate = new Date(2025, 9, 14)  // 14 octobre 2025
  const offset = (semaine - 1) * 7
  const date = new Date(baseDate)
  date.setDate(date.getDate() + offset)
  return date
}

/**
 * Calcule le num√©ro de semaine √† partir d'une date.
 */
function getWeekNumber(date: Date): number {
  const baseDate = new Date(2025, 9, 14)
  const diff = date.getTime() - baseDate.getTime()
  const days = Math.floor(diff / (1000 * 60 * 60 * 24))
  return Math.floor(days / 7) + 1
}
```

**Points cl√©s** :
- **events** : Transformation matchs ‚Üí EventInput FullCalendar
- **editable** : Bas√© sur est_modifiable (false si fix√© ou < semaine_min)
- **eventDrop** : Appel useMoveMatch(), revert si erreur
- **eventClick** : Ouvrir modale de d√©tails
- **renderEventContent** : Badge "Fix√©" sur matchs fixes
- **getSemaineDate/getWeekNumber** : Conversion semaine ‚Üî date (√† adapter au calendrier r√©el)

---

### Modale de d√©tails match

**üìÅ Fichier √† cr√©er** : `frontend/src/components/Calendar/EventDetailsModal.tsx`

**Contenu complet** :

```typescript
/**
 * Modale pour afficher les d√©tails d'un match.
 * 
 * Fonctionnalit√©s :
 * - Afficher √©quipes, gymnase, semaine
 * - Bouton Fixer/D√©fixer
 * - Bouton Supprimer
 * - Bouton Modifier (optionnel)
 */

import { Fragment } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { 
  XMarkIcon, 
  LockClosedIcon, 
  LockOpenIcon,
  TrashIcon 
} from '@heroicons/react/24/outline'

import { useFixMatch, useUnfixMatch, useDeleteMatch } from '@hooks'
import { getErrorMessage } from '@utils/apiHelpers'
import type { MatchExtended } from '@types'

interface EventDetailsModalProps {
  match: MatchExtended
  isOpen: boolean
  onClose: () => void
  semaineMin: number
}

export default function EventDetailsModal({
  match,
  isOpen,
  onClose,
  semaineMin,
}: EventDetailsModalProps) {
  const fixMatch = useFixMatch()
  const unfixMatch = useUnfixMatch()
  const deleteMatch = useDeleteMatch()

  // Fixer match
  const handleFix = async () => {
    try {
      await fixMatch.mutateAsync(match.id)
      onClose()
    } catch (error) {
      alert(`Erreur : ${getErrorMessage(error)}`)
    }
  }

  // D√©fixer match
  const handleUnfix = async () => {
    try {
      await unfixMatch.mutateAsync(match.id)
      onClose()
    } catch (error) {
      alert(`Erreur : ${getErrorMessage(error)}`)
    }
  }

  // Supprimer match
  const handleDelete = async () => {
    if (!confirm('√ätes-vous s√ªr de vouloir supprimer ce match ?')) return

    try {
      await deleteMatch.mutateAsync({
        id: match.id,
        projectId: match.project_id,
      })
      onClose()
    } catch (error) {
      alert(`Erreur : ${getErrorMessage(error)}`)
    }
  }

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        {/* Backdrop */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-25" />
        </Transition.Child>

        {/* Modal */}
        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 shadow-xl transition-all">
                {/* Header */}
                <div className="flex items-center justify-between mb-4">
                  <Dialog.Title className="text-lg font-medium text-gray-900">
                    D√©tails du match
                  </Dialog.Title>
                  <button
                    onClick={onClose}
                    className="text-gray-400 hover:text-gray-500"
                  >
                    <XMarkIcon className="h-6 w-6" />
                  </button>
                </div>

                {/* Contenu */}
                <div className="space-y-4">
                  {/* √âquipes */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      √âquipes
                    </label>
                    <div className="mt-1 text-base text-gray-900">
                      {match.equipe_domicile?.nom || `√âquipe ${match.equipe_domicile_id}`}
                      <span className="mx-2 text-gray-500">vs</span>
                      {match.equipe_exterieur?.nom || `√âquipe ${match.equipe_exterieur_id}`}
                    </div>
                  </div>

                  {/* Gymnase */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Gymnase
                    </label>
                    <div className="mt-1 text-base text-gray-900">
                      {match.gymnase?.nom || 'Non assign√©'}
                    </div>
                  </div>

                  {/* Semaine */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Semaine
                    </label>
                    <div className="mt-1 text-base text-gray-900">
                      Semaine {match.semaine}
                      {match.semaine && match.semaine < semaineMin && (
                        <span className="ml-2 text-sm text-orange-600">
                          (Non modifiable - avant semaine {semaineMin})
                        </span>
                      )}
                    </div>
                  </div>

                  {/* √âtat */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      √âtat
                    </label>
                    <div className="mt-1">
                      {match.est_fixe ? (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                          <LockClosedIcon className="h-4 w-4 mr-1" />
                          Fix√© (non modifiable par le solver)
                        </span>
                      ) : (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          <LockOpenIcon className="h-4 w-4 mr-1" />
                          Modifiable
                        </span>
                      )}
                    </div>
                  </div>
                </div>

                {/* Actions */}
                <div className="mt-6 flex gap-3">
                  {/* Fixer/D√©fixer */}
                  {match.est_modifiable && (
                    <>
                      {match.est_fixe ? (
                        <button
                          onClick={handleUnfix}
                          disabled={unfixMatch.isPending}
                          className="flex-1 inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50"
                        >
                          <LockOpenIcon className="h-5 w-5 mr-2" />
                          {unfixMatch.isPending ? 'D√©fixage...' : 'D√©fixer'}
                        </button>
                      ) : (
                        <button
                          onClick={handleFix}
                          disabled={fixMatch.isPending}
                          className="flex-1 inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50"
                        >
                          <LockClosedIcon className="h-5 w-5 mr-2" />
                          {fixMatch.isPending ? 'Fixage...' : 'Fixer'}
                        </button>
                      )}
                    </>
                  )}

                  {/* Supprimer */}
                  <button
                    onClick={handleDelete}
                    disabled={deleteMatch.isPending}
                    className="flex-1 inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50"
                  >
                    <TrashIcon className="h-5 w-5 mr-2" />
                    {deleteMatch.isPending ? 'Suppression...' : 'Supprimer'}
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  )
}
```

**Points cl√©s** :
- **@headlessui/react Dialog** : Modale accessible avec transitions
- **@heroicons/react** : Ic√¥nes LockClosed, LockOpen, Trash, XMark
- **Boutons conditionnels** : Fixer/D√©fixer selon match.est_fixe
- **D√©sactivation** : Si match.semaine < semaineMin, pas de boutons Fixer/D√©fixer
- **Mutations** : useFixMatch, useUnfixMatch, useDeleteMatch avec states isPending

---

### Styles CSS personnalis√©s FullCalendar

**üìÅ Fichier √† cr√©er** : `frontend/src/assets/styles/calendar.css`

**Contenu** :

```css
/* Styles personnalis√©s FullCalendar */

/* √âv√©nements */
.fc-event {
  cursor: pointer;
  transition: opacity 0.2s;
}

.fc-event:hover {
  opacity: 0.9;
}

/* √âv√©nements non modifiables (gris√©s) */
.fc-event:not(.fc-event-draggable) {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Badge "Fix√©" */
.fc-event .badge-fixed {
  background-color: rgba(239, 68, 68, 0.8);
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  font-weight: 600;
  margin-left: 4px;
}

/* Titre calendrier */
.fc-toolbar-title {
  font-size: 1.5rem !important;
  font-weight: 600 !important;
  color: #1f2937;
}

/* Boutons */
.fc-button {
  background-color: #3b82f6 !important;
  border-color: #3b82f6 !important;
}

.fc-button:hover {
  background-color: #2563eb !important;
  border-color: #2563eb !important;
}

.fc-button-active {
  background-color: #1d4ed8 !important;
  border-color: #1d4ed8 !important;
}

/* Cellules jours */
.fc-daygrid-day {
  cursor: pointer;
}

.fc-daygrid-day:hover {
  background-color: #f3f4f6;
}

/* √âv√©nements en cours de drag */
.fc-event-dragging {
  opacity: 0.5;
}
```

**Importer dans Calendar.tsx** :
```typescript
import '../../assets/styles/calendar.css'
```

---

## √Ä faire/v√©rifier

**Checklist de d√©veloppement** :

1. ‚úÖ Cr√©er `components/Calendar/Calendar.tsx` avec :
   - FullCalendar avec dayGrid + interaction plugins
   - Transformation matchs ‚Üí EventInput
   - Drag & drop avec useMoveMatch()
   - Clic √©v√©nement ‚Üí modale
   - Badge "Fix√©" sur matchs fixes

2. ‚úÖ Cr√©er `components/Calendar/EventDetailsModal.tsx` avec :
   - @headlessui/react Dialog
   - Affichage d√©tails (√©quipes, gymnase, semaine)
   - Boutons Fixer/D√©fixer (conditionnel)
   - Bouton Supprimer

3. ‚úÖ Cr√©er `assets/styles/calendar.css` :
   - Styles √©v√©nements
   - Styles badge "Fix√©"
   - Styles boutons FullCalendar

4. ‚úÖ Installer d√©pendances si manquantes :
   ```bash
   npm install @headlessui/react @heroicons/react
   ```

**Checklist de validation** :

1. ‚úÖ **Test affichage calendrier** :
   ```tsx
   import Calendar from '@components/Calendar/Calendar'
   
   function App() {
     return <Calendar projectId={1} semaineMin={2} />
   }
   ```

2. ‚úÖ **Test drag & drop** :
   - Glisser un match modifiable (semaine >= semaine_min, non fix√©)
   - V√©rifier appel useMoveMatch()
   - V√©rifier refetch automatique (React Query)

3. ‚úÖ **Test matchs non modifiables** :
   - Match fix√© : Pas de drag & drop, badge "Fix√©"
   - Match semaine < semaine_min : Pas de drag & drop

4. ‚úÖ **Test modale** :
   - Clic sur match ‚Üí Modale s'ouvre
   - Bouton Fixer ‚Üí Match devient fix√©, badge appara√Æt
   - Bouton D√©fixer ‚Üí Match devient modifiable
   - Bouton Supprimer ‚Üí Match supprim√©, calendrier mis √† jour

5. ‚úÖ **Test responsive** :
   - Tester sur mobile (vue semaine, √©v√©nements lisibles)

**Commandes de test** :
```bash
# Lancer dev
npm run dev

# V√©rifier types
npx tsc --noEmit

# Build production
npm run build
```

---

## Questions

**Questions critiques** :

1. **Calendrier dates r√©elles** :
   - Date de d√©but r√©elle de la semaine 1 ? (actuellement 14 octobre 2025)
   - Faut-il un s√©lecteur de date de d√©but dans l'interface ?
   - Faut-il stocker date_debut dans Project (config_yaml_data) ?

2. **Vues calendrier** :
   - dayGridMonth et dayGridWeek suffisantes ?
   - Faut-il une vue liste (listWeek) ?
   - Faut-il une vue personnalis√©e "Semaine du championnat" ?

3. **Couleurs √©v√©nements** :
   - Couleurs par poule (actuel) : OK ?
   - Ou par niveau, cat√©gorie, institution ?
   - Faut-il des couleurs configurables (config YAML) ?

4. **D√©tails √©v√©nements** :
   - jour_semaine et heure_debut √† afficher ?
   - Faut-il √©diter ces champs dans la modale ?
   - Faut-il un formulaire complet de modification ?

5. **Filtres** :
   - Faut-il filtrer matchs par poule, niveau, cat√©gorie ?
   - Faut-il un s√©lecteur de vue (Toutes les poules / Poule sp√©cifique) ?

6. **Export** :
   - Faut-il exporter calendrier en PDF/Excel ?
   - Faut-il partager calendrier (lien public, iCal) ?

---

## Documentation

Documenter uniquement :
- **getSemaineDate/getWeekNumber** : Expliquer conversion semaine ‚Üî date
- **editable: est_modifiable** : Expliquer d√©sactivation drag si fix√© ou < semaine_min
- **eventDrop revert** : Expliquer annulation si erreur backend
- **Badge "Fix√©"** : Expliquer renderEventContent personnalis√©
