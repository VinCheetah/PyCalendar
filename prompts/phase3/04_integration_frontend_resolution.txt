# Prompt 3.4 : Int√©gration Frontend de la R√©solution# Prompt 3.4 : Int√©gration frontend ‚Äì R√©solution projet



## Contexte global## Contexte global

PyCalendar V2 doit permettre √† l'utilisateur de d√©clencher la r√©solution (optimisation) du calendrier directement depuis l'interface React. Cette t√¢che int√®gre le bouton "Optimiser", l'affichage des r√©sultats, et la gestion des erreurs.PyCalendar V2 doit permettre √† l'utilisateur de lancer la r√©solution d'un projet depuis l'interface web. L'architecture frontend doit rester claire, maintenable et facilement extensible pour supporter diff√©rentes strat√©gies de r√©solution et options de configuration.



**RAPPEL - Double configuration et r√©solution frontend** :## Contexte technique

- **Bouton Optimiser** : Appelle POST /projects/{id}/solveCette t√¢che concerne l'int√©gration du bouton de r√©solution et du hook associ√© dans le frontend, pour interagir avec l'endpoint API de r√©solution et rafra√Æchir automatiquement le calendrier.

- **Affichage r√©sultat** : Toast + mise √† jour calendrier

- **Strat√©gie** : Affich√©e depuis config_yaml_data.solver.strategie## R√©sum√© du travail pr√©c√©dent

- Le backend expose un endpoint de r√©solution (`POST /api/projects/{id}/solve`).

## Contexte technique- Le frontend g√®re l'affichage du calendrier et la navigation (`frontend/src/pages/`).

Cette t√¢che cr√©e l'interface frontend pour d√©clencher et afficher les r√©sultats de r√©solution du calendrier.- Les hooks React Query sont en place pour la gestion des donn√©es (`frontend/src/hooks/`).

- Le client API est configur√© (`frontend/src/api/`).

## R√©sum√© du travail pr√©c√©dent

- Endpoint POST /projects/{id}/solve cr√©√© (T√¢che 3.3)## Objectifs

- Hooks React Query pour API cr√©√©s (T√¢che 2.4)- Cr√©er l'endpoint API c√¥t√© frontend pour appeler la r√©solution.

- Calendar component avec drag & drop (T√¢che 2.5)- D√©finir le hook React Query pour g√©rer l'appel et l'invalidation du cache.

- ProjectSelector + ProjectStats (T√¢che 2.6)- Int√©grer le bouton de r√©solution dans l'interface avec gestion des √©tats.

- Pr√©voir l'√©volution pour d'autres solveurs, param√®tres ou feedback utilisateur am√©lior√©.

## Objectifs

1. Cr√©er hook useSolve pour appeler endpoint## D√©tails techniques

2. Ajouter bouton "Optimiser le calendrier" dans page principale

3. Afficher r√©sultats de r√©solution (toast, stats)### Sous-t√¢che 1 : Endpoint API frontend

4. G√©rer erreurs (aucune solution, timeout)**Fichier √† cr√©er** : `frontend/src/api/endpoints/solver.ts`

5. D√©sactiver bouton si aucun match modifiable

6. Afficher progression (optionnel pour async)**Imports** :

```typescript

## D√©tails techniquesimport apiClient from '../client'

```

### Hook React Query pour r√©solution

**Interface pour la r√©ponse** :

**üìÅ Fichier √† cr√©er** : `frontend/src/hooks/useSolve.ts````typescript

export interface SolveResponse {

**Code complet** :  message: string

  project_id: number

```typescript  strategy: string

import { useMutation, useQueryClient } from '@tanstack/react-query';  matchs_planifies: number

import { projectsApi } from '@/api/client';  cout_total?: number

}

/**```

 * Interface pour les param√®tres de r√©solution (override optionnel).

 */**Objet export** :

export interface SolveParams {```typescript

  strategie?: 'optimal' | 'heuristique' | 'hybride';export const solverApi = {

  temps_max_secondes?: number;  solve: async (

}    projectId: number, 

    strategy: 'cpsat' | 'greedy' = 'cpsat'

/**  ): Promise<SolveResponse> => {

 * Interface pour les r√©sultats de r√©solution.    const { data } = await apiClient.post(

 */      `/projects/${projectId}/solve`, 

export interface SolveResult {      { strategy }

  project_id: number;    )

  strategie: string;    return data

  nb_matchs_total: number;  }

  nb_matchs_fixes: number;}

  nb_matchs_planifies: number;```

  nb_matchs_modifiables: number;

  temps_execution_secondes: number;**Ajouter √† l'export centralis√©** : `frontend/src/api/index.ts`

  erreurs?: string[];```typescript

}export * from './endpoints/solver'

```

/**

 * Hook pour r√©soudre (optimiser) un projet.### Sous-t√¢che 2 : Hook React Query

 * **Fichier √† cr√©er** : `frontend/src/hooks/useSolver.ts`

 * **Fonctionnalit√©s** :

 * - Appelle POST /projects/{id}/solve**Imports** :

 * - Invalidation cache apr√®s r√©solution```typescript

 * - Gestion erreurs (toast, message)import { useMutation, useQueryClient } from '@tanstack/react-query'

 * import { solverApi } from '@/api'

 * **Utilisation** :import type { SolveResponse } from '@/api/endpoints/solver'

 * ```tsx```

 * const { mutate: solve, isPending } = useSolve();

 * **Hook principal** :

 * solve({ projectId: 1 }, {```typescript

 *   onSuccess: (result) => {export function useSolveProject() {

 *     toast.success(`${result.nb_matchs_planifies} matchs planifi√©s`);  const queryClient = useQueryClient()

 *   }  

 * });  return useMutation({

 * ```    mutationFn: ({ 

 */      projectId, 

export function useSolve() {      strategy 

  const queryClient = useQueryClient();    }: { 

      projectId: number

  return useMutation<      strategy: 'cpsat' | 'greedy' 

    SolveResult,    }): Promise<SolveResponse> => {

    Error,      return solverApi.solve(projectId, strategy)

    { projectId: number; params?: SolveParams }    },

  >({    

    mutationFn: async ({ projectId, params }) => {    onSuccess: (data) => {

      const response = await projectsApi.solve(projectId, params);      console.log(`‚úÖ R√©solution termin√©e: ${data.matchs_planifies} matchs planifi√©s`)

      return response.data;      

    },      // Invalider queries matches pour refetch automatique

          queryClient.invalidateQueries({ queryKey: ['matches'] })

    onSuccess: (result, variables) => {      

      // Invalider cache des matchs (affichage mis √† jour)      // Invalider projet pour mettre √† jour les stats

      queryClient.invalidateQueries({      queryClient.invalidateQueries({ queryKey: ['projects', data.project_id] })

        queryKey: ['matches', 'list', variables.projectId]    },

      });    

          onError: (error) => {

      // Invalider cache des stats projet      console.error('‚ùå Erreur r√©solution:', error)

      queryClient.invalidateQueries({    }

        queryKey: ['projects', 'stats', variables.projectId]  })

      });}

      ```

      // Invalider cache du projet (m√©tadonn√©es)

      queryClient.invalidateQueries({**Ajouter √† l'export centralis√©** : `frontend/src/hooks/index.ts`

        queryKey: ['projects', 'detail', variables.projectId]```typescript

      });export * from './useSolver'

    },```

  });

}### Sous-t√¢che 3 : UI Bouton dans CalendarPage

```**Fichier √† modifier** : `frontend/src/pages/CalendarPage.tsx`



**Points cl√©s** :**Import** :

- **SolveParams** : Override optionnel strat√©gie/temps_max```typescript

- **SolveResult** : R√©sultat de r√©solution (matchs planifi√©s, temps, etc.)import { useSolveProject } from '@/hooks'

- **Invalidation cache** : Matchs + stats + projet apr√®s r√©solution```

- **onSuccess** : Callback pour toast/notification

**Hook dans le composant** :

---```typescript

const solveProject = useSolveProject()

### Fonction API pour r√©solution```



**üìÅ Fichier √† modifier** : `frontend/src/api/client.ts`**Handler** :

```typescript

**Ajout dans projectsApi** :const handleSolve = async (strategy: 'cpsat' | 'greedy') => {

  try {

```typescript    const result = await solveProject.mutateAsync({ 

export const projectsApi = {      projectId: selectedProjectId, 

  // ... Fonctions existantes (getProjects, getProject, etc.) ...      strategy 

    })

  /**    

   * R√©sout (optimise) le calendrier d'un projet.    // Phase 4 : toast notification

   *     alert(`‚úÖ ${result.matchs_planifies} matchs planifi√©s avec succ√®s !`)

   * @param projectId - ID du projet    

   * @param params - Param√®tres optionnels (override strat√©gie, temps_max)  } catch (error) {

   * @returns R√©sultat de r√©solution    alert(`‚ùå Erreur lors de la r√©solution: ${(error as Error).message}`)

   */  }

  solve: (projectId: number, params?: SolveParams) =>}

    apiClient.post<SolveResult>(`/projects/${projectId}/solve`, params || {}),```



  /****UI dans le render** (ajouter dans le header) :

   * R√©cup√®re le statut de r√©solution asynchrone (optionnel).```tsx

   * <header className="mb-6">

   * @param projectId - ID du projet  <div className="flex items-center justify-between">

   * @returns Statut de r√©solution    <div>

   */      <h1 className="text-3xl font-bold">Calendrier Sportif</h1>

  getSolveStatus: (projectId: number) =>      <p className="text-gray-600">

    apiClient.get<SolveStatus>(`/projects/${projectId}/solve/status`),        Projet ID: {selectedProjectId} | {matches?.length || 0} matchs

      </p>

  /**    </div>

   * Annule une r√©solution en cours (optionnel).    

   *     <div className="flex gap-2">

   * @param projectId - ID du projet      <button

   */        onClick={() => handleSolve('cpsat')}

  cancelSolve: (projectId: number) =>        disabled={solveProject.isLoading}

    apiClient.delete(`/projects/${projectId}/solve`),        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"

};      >

```        {solveProject.isLoading && solveProject.variables?.strategy === 'cpsat' 

          ? 'Calcul CP-SAT...' 

**Interfaces √† ajouter** :          : 'Recalculer (CP-SAT)'}

      </button>

```typescript      

export interface SolveParams {      <button

  strategie?: 'optimal' | 'heuristique' | 'hybride';        onClick={() => handleSolve('greedy')}

  temps_max_secondes?: number;        disabled={solveProject.isLoading}

}        className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:bg-gray-400"

      >

export interface SolveResult {        {solveProject.isLoading && solveProject.variables?.strategy === 'greedy' 

  project_id: number;          ? 'Calcul Greedy...' 

  strategie: string;          : 'Recalculer (Greedy)'}

  nb_matchs_total: number;      </button>

  nb_matchs_fixes: number;    </div>

  nb_matchs_planifies: number;  </div>

  nb_matchs_modifiables: number;</header>

  temps_execution_secondes: number;```

  erreurs?: string[];

}### Sous-t√¢che 4 (Optionnel) : Toast notifications

**Installer react-hot-toast** :

export interface SolveStatus {```bash

  project_id: number;npm install react-hot-toast

  status: 'pending' | 'running' | 'completed' | 'failed';```

  progress?: number; // 0.0 √† 1.0

  message?: string;**Modifier App.tsx** :

  result?: SolveResult;```typescript

}import { Toaster } from 'react-hot-toast'

```

// Dans le render

**Points cl√©s** :<Toaster position="top-right" />

- **solve()** : POST avec params optionnels```

- **getSolveStatus()** : R√©cup√©rer statut async (optionnel)

- **cancelSolve()** : Annuler r√©solution (optionnel)**Utiliser dans handleSolve** :

```typescript

---import toast from 'react-hot-toast'



### Bouton "Optimiser le calendrier"const handleSolve = async (strategy: 'cpsat' | 'greedy') => {

  try {

**üìÅ Fichier √† cr√©er** : `frontend/src/components/SolveButton.tsx`    const result = await solveProject.mutateAsync({ projectId: selectedProjectId, strategy })

    toast.success(`‚úÖ ${result.matchs_planifies} matchs planifi√©s avec succ√®s !`)

**Code complet** :  } catch (error) {

    toast.error(`‚ùå Erreur: ${(error as Error).message}`)

```typescript  }

import { useState } from 'react';}

import { useSolve } from '@/hooks/useSolve';```

import { useProjectStats } from '@/hooks/useProjects';

import { CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/solid';### Consignes d'organisation

- D√©sactiver boutons pendant r√©solution (`isLoading`)

interface SolveButtonProps {- Feedback visuel clair (spinner, texte "Calcul en cours...")

  projectId: number;- Invalider queries pour refetch automatique du calendrier

  onSuccess?: (result: SolveResult) => void;- G√©rer les erreurs avec messages clairs (toast ou alert)

  onError?: (error: Error) => void;- Pr√©voir l'√©volution pour s√©lection dynamique de projet (Phase 4)

}- Consid√©rer feedback avanc√© : dur√©e r√©solution, co√ªt, statistiques



/**### Impact et liens

 * Bouton pour d√©clencher l'optimisation du calendrier.- L'endpoint API backend (`backend/api/routes/solver.py`) est appel√©.

 * - Le hook React Query g√®re l'invalidation du cache apr√®s r√©solution.

 * **Fonctionnalit√©s** :- Le calendrier (`Calendar` component) se rafra√Æchit automatiquement.

 * - D√©sactiv√© si aucun match modifiable

 * - Affiche progression pendant r√©solution## √Ä faire/v√©rifier

 * - Toast succ√®s/erreur apr√®s r√©solution- Cr√©er l'endpoint API frontend (solver.ts)

 * - Cr√©er le hook useSolveProject

 * **Utilisation** :- Modifier CalendarPage pour ajouter les boutons

 * ```tsx- (Optionnel) Installer et configurer react-hot-toast

 * <SolveButton - Tester l'int√©gration compl√®te :

 *   projectId={1}  - Backend d√©marr√©

 *   onSuccess={(result) => toast.success(`${result.nb_matchs_planifies} matchs planifi√©s`)}  - Frontend d√©marr√©

 * />  - Fixer 2-3 matchs via interface (Phase 4) ou API directe

 * ```  - Cliquer "Recalculer (CP-SAT)"

 */  - V√©rifier :

export function SolveButton({ projectId, onSuccess, onError }: SolveButtonProps) {    - Bouton d√©sactiv√© pendant calcul

  const { data: stats } = useProjectStats(projectId);    - Texte change en "Calcul CP-SAT..."

  const { mutate: solve, isPending } = useSolve();    - Calendrier se rafra√Æchit apr√®s r√©solution

  const [result, setResult] = useState<SolveResult | null>(null);    - Matchs fixes n'ont pas boug√©

    - Autres matchs replanifi√©s

  // V√©rifier si r√©solution possible    - Notification succ√®s affich√©e

  const nbMatchsModifiables = stats   - Tester avec "Recalculer (Greedy)"

    ? stats.nb_matchs_total - stats.nb_matchs_fixes   - Tester les erreurs (projet inexistant, backend arr√™t√©)

    : 0;- V√©rifier que les queries sont invalid√©es (React Query DevTools)

  const canSolve = nbMatchsModifiables > 0;

## Questions

  const handleSolve = () => {Poser des questions si des points sur React Query, l'invalidation du cache, la gestion des √©tats, le feedback utilisateur ou l'int√©gration ne sont pas clairs.

    solve(

      { projectId },## Documentation

      {Rester concis, ne pas ajouter de documentation excessive. Commenter bri√®vement la logique d'invalidation des queries si besoin.

        onSuccess: (data) => {
          setResult(data);
          onSuccess?.(data);
        },
        onError: (err) => {
          onError?.(err);
        },
      }
    );
  };

  return (
    <div className="flex flex-col gap-3">
      {/* Bouton principal */}
      <button
        onClick={handleSolve}
        disabled={!canSolve || isPending}
        className={`
          px-6 py-3 rounded-lg font-semibold
          transition-colors duration-200
          ${canSolve && !isPending
            ? 'bg-blue-600 hover:bg-blue-700 text-white'
            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
          }
        `}
      >
        {isPending ? (
          <span className="flex items-center gap-2">
            <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
              <circle
                className="opacity-25"
                cx="12" cy="12" r="10"
                stroke="currentColor" strokeWidth="4" fill="none"
              />
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
              />
            </svg>
            Optimisation en cours...
          </span>
        ) : (
          'Optimiser le calendrier'
        )}
      </button>

      {/* Message si aucun match modifiable */}
      {!canSolve && (
        <p className="text-sm text-gray-600">
          Aucun match modifiable (tous les matchs sont fix√©s ou avant semaine_minimum).
        </p>
      )}

      {/* R√©sultat de r√©solution */}
      {result && (
        <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-start gap-3">
            <CheckCircleIcon className="w-6 h-6 text-green-600 flex-shrink-0 mt-0.5" />
            <div className="flex-1">
              <h4 className="font-semibold text-green-900">
                Optimisation r√©ussie
              </h4>
              <dl className="mt-2 grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
                <div>
                  <dt className="text-gray-600">Strat√©gie</dt>
                  <dd className="font-medium text-gray-900">{result.strategie}</dd>
                </div>
                <div>
                  <dt className="text-gray-600">Temps d'ex√©cution</dt>
                  <dd className="font-medium text-gray-900">
                    {result.temps_execution_secondes.toFixed(2)}s
                  </dd>
                </div>
                <div>
                  <dt className="text-gray-600">Matchs planifi√©s</dt>
                  <dd className="font-medium text-gray-900">
                    {result.nb_matchs_planifies} / {result.nb_matchs_total}
                  </dd>
                </div>
                <div>
                  <dt className="text-gray-600">Matchs modifi√©s</dt>
                  <dd className="font-medium text-gray-900">
                    {result.nb_matchs_modifiables}
                  </dd>
                </div>
              </dl>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
```

**Points cl√©s** :
- **D√©sactiv√© si aucun match modifiable** : nbMatchsModifiables = total - fixes
- **Spinner pendant r√©solution** : isPending
- **R√©sultat affich√©** : Cards avec strat√©gie, temps, matchs planifi√©s
- **Callback onSuccess** : Pour toast externe

---

### Int√©gration dans page principale

**üìÅ Fichier √† modifier** : `frontend/src/pages/App.tsx`

**Ajout du bouton** :

```typescript
import { useState } from 'react';
import { ProjectSelector } from '@/components/ProjectSelector';
import { ProjectStats } from '@/components/ProjectStats';
import { Calendar } from '@/components/Calendar';
import { SolveButton } from '@/components/SolveButton';
import { Header } from '@/components/Header';
import { toast, Toaster } from 'react-hot-toast'; // Installer : npm install react-hot-toast

export function App() {
  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(null);

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* S√©lecteur de projet */}
        <div className="mb-6">
          <ProjectSelector
            selectedProjectId={selectedProjectId}
            onSelect={setSelectedProjectId}
          />
        </div>

        {selectedProjectId && (
          <div className="space-y-6">
            {/* Stats projet */}
            <ProjectStats projectId={selectedProjectId} />

            {/* Bouton Optimiser */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Optimisation du calendrier
              </h3>
              <SolveButton
                projectId={selectedProjectId}
                onSuccess={(result) => {
                  toast.success(
                    `‚úÖ ${result.nb_matchs_planifies} matchs planifi√©s en ${result.temps_execution_secondes.toFixed(1)}s`,
                    { duration: 5000 }
                  );
                }}
                onError={(error) => {
                  toast.error(
                    `‚ùå Erreur lors de l'optimisation : ${error.message}`,
                    { duration: 7000 }
                  );
                }}
              />
            </div>

            {/* Calendrier */}
            <Calendar projectId={selectedProjectId} />
          </div>
        )}
      </main>

      {/* Toast notifications */}
      <Toaster position="top-right" />
    </div>
  );
}
```

**Points cl√©s** :
- **SolveButton** : Int√©gr√© entre ProjectStats et Calendar
- **Toasts** : react-hot-toast pour notifications
- **onSuccess** : Toast avec r√©sultat (matchs planifi√©s, temps)
- **onError** : Toast avec message d'erreur

---

### Modal de configuration de r√©solution (optionnel)

**üìÅ Fichier √† cr√©er** : `frontend/src/components/SolveConfigModal.tsx`

**Code complet** :

```typescript
import { Fragment, useState } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon } from '@heroicons/react/24/outline';
import { SolveParams } from '@/hooks/useSolve';

interface SolveConfigModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: (params: SolveParams) => void;
  defaultStrategie?: string;
}

/**
 * Modal pour configurer les param√®tres de r√©solution.
 * 
 * Permet d'override strat√©gie et temps_max pour une r√©solution ponctuelle.
 */
export function SolveConfigModal({
  isOpen,
  onClose,
  onConfirm,
  defaultStrategie = 'hybride'
}: SolveConfigModalProps) {
  const [strategie, setStrategie] = useState<string>(defaultStrategie);
  const [tempsMax, setTempsMax] = useState<number>(300); // 5 minutes par d√©faut

  const handleConfirm = () => {
    onConfirm({
      strategie: strategie as 'optimal' | 'heuristique' | 'hybride',
      temps_max_secondes: tempsMax
    });
    onClose();
  };

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-25" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 shadow-xl transition-all">
                <div className="flex items-center justify-between mb-4">
                  <Dialog.Title className="text-lg font-semibold text-gray-900">
                    Configuration de la r√©solution
                  </Dialog.Title>
                  <button
                    onClick={onClose}
                    className="text-gray-400 hover:text-gray-500"
                  >
                    <XMarkIcon className="w-6 h-6" />
                  </button>
                </div>

                <div className="space-y-4">
                  {/* Strat√©gie */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Strat√©gie de r√©solution
                    </label>
                    <select
                      value={strategie}
                      onChange={(e) => setStrategie(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="optimal">Optimal (CP-SAT)</option>
                      <option value="heuristique">Heuristique (rapide)</option>
                      <option value="hybride">Hybride (optimal + fallback)</option>
                    </select>
                    <p className="mt-1 text-sm text-gray-500">
                      {strategie === 'optimal' && 'Solution optimale garantie (peut √™tre lent)'}
                      {strategie === 'heuristique' && 'Solution rapide (non garantie optimale)'}
                      {strategie === 'hybride' && 'Essaie optimal, bascule heuristique si √©chec'}
                    </p>
                  </div>

                  {/* Temps max */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Temps maximum (secondes)
                    </label>
                    <input
                      type="number"
                      value={tempsMax}
                      onChange={(e) => setTempsMax(parseInt(e.target.value))}
                      min={10}
                      max={3600}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                    <p className="mt-1 text-sm text-gray-500">
                      Temps max avant timeout (10s √† 1h)
                    </p>
                  </div>
                </div>

                {/* Actions */}
                <div className="mt-6 flex justify-end gap-3">
                  <button
                    onClick={onClose}
                    className="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-lg"
                  >
                    Annuler
                  </button>
                  <button
                    onClick={handleConfirm}
                    className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg"
                  >
                    Optimiser
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
}
```

**Modification SolveButton pour utiliser modal** :

```typescript
import { SolveConfigModal } from './SolveConfigModal';

export function SolveButton({ projectId, onSuccess, onError }: SolveButtonProps) {
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  // ... code existant ...

  const handleSolveWithConfig = (params: SolveParams) => {
    solve(
      { projectId, params },
      { onSuccess, onError }
    );
  };

  return (
    <>
      <button
        onClick={() => setIsModalOpen(true)}
        disabled={!canSolve}
        // ... style existant ...
      >
        Configurer et optimiser
      </button>

      <SolveConfigModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onConfirm={handleSolveWithConfig}
        defaultStrategie={project?.config_yaml_data?.solver?.strategie}
      />
    </>
  );
}
```

**Points cl√©s** :
- **Modal @headlessui** : Configuration strat√©gie + temps_max
- **Override config YAML** : Temporaire pour cette r√©solution
- **Descriptions strat√©gies** : Aide utilisateur √† choisir

---

### Affichage progression (r√©solution async)

**üìÅ Fichier √† cr√©er** : `frontend/src/components/SolveProgress.tsx`

**Code pour polling statut** :

```typescript
import { useQuery } from '@tanstack/react-query';
import { projectsApi } from '@/api/client';

interface SolveProgressProps {
  projectId: number;
}

/**
 * Composant pour afficher la progression de r√©solution asynchrone.
 * 
 * Utilise polling pour r√©cup√©rer statut depuis GET /projects/{id}/solve/status.
 */
export function SolveProgress({ projectId }: SolveProgressProps) {
  const { data: status } = useQuery({
    queryKey: ['solve-status', projectId],
    queryFn: async () => {
      const res = await projectsApi.getSolveStatus(projectId);
      return res.data;
    },
    refetchInterval: (data) => {
      // Polling toutes les secondes si en cours
      if (data?.status === 'running' || data?.status === 'pending') {
        return 1000;
      }
      // Arr√™ter polling si termin√©/√©chec
      return false;
    },
    enabled: true,
  });

  if (!status) return null;

  return (
    <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
      <div className="flex items-center gap-3">
        {/* Spinner si en cours */}
        {(status.status === 'running' || status.status === 'pending') && (
          <svg className="animate-spin h-5 w-5 text-blue-600" viewBox="0 0 24 24">
            <circle
              className="opacity-25"
              cx="12" cy="12" r="10"
              stroke="currentColor" strokeWidth="4" fill="none"
            />
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
            />
          </svg>
        )}

        <div className="flex-1">
          <p className="text-sm font-medium text-blue-900">
            {status.message || 'R√©solution en cours...'}
          </p>
          
          {/* Barre de progression */}
          {status.progress !== undefined && (
            <div className="mt-2 w-full bg-blue-200 rounded-full h-2">
              <div
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${status.progress * 100}%` }}
              />
            </div>
          )}
        </div>
      </div>

      {/* R√©sultat si termin√© */}
      {status.status === 'completed' && status.result && (
        <div className="mt-3 text-sm text-blue-800">
          ‚úÖ {status.result.nb_matchs_planifies} matchs planifi√©s en{' '}
          {status.result.temps_execution_secondes.toFixed(1)}s
        </div>
      )}

      {/* Erreur si √©chec */}
      {status.status === 'failed' && (
        <div className="mt-3 text-sm text-red-800">
          ‚ùå {status.message}
        </div>
      )}
    </div>
  );
}
```

**Points cl√©s** :
- **Polling avec refetchInterval** : 1s si running, stop si termin√©
- **Barre de progression** : Si status.progress fourni
- **Affichage r√©sultat** : Cards si completed

---

## √Ä faire/v√©rifier

**Checklist de d√©veloppement** :

1. ‚úÖ Cr√©er hook dans `frontend/src/hooks/useSolve.ts` :
   - useSolve() avec mutation POST /solve
   - Interfaces SolveParams, SolveResult
   - Invalidation cache apr√®s r√©solution

2. ‚úÖ Cr√©er composant dans `frontend/src/components/SolveButton.tsx` :
   - Bouton "Optimiser le calendrier"
   - D√©sactiv√© si aucun match modifiable
   - Spinner pendant r√©solution
   - Affichage r√©sultat (strat√©gie, temps, matchs)

3. ‚úÖ Int√©grer dans `frontend/src/pages/App.tsx` :
   - Placer SolveButton entre ProjectStats et Calendar
   - Toasts avec react-hot-toast
   - Callbacks onSuccess/onError

4. ‚úÖ (Optionnel) Cr√©er modal configuration :
   - SolveConfigModal pour override strat√©gie/temps_max
   - Descriptions strat√©gies (optimal, heuristique, hybride)

5. ‚úÖ (Optionnel) Cr√©er composant progression :
   - SolveProgress avec polling statut
   - Barre de progression
   - Affichage r√©sultat/erreur

**Checklist de validation** :

1. ‚úÖ **Test bouton Optimiser** :
   ```bash
   # Lancer backend + frontend
   cd backend && uvicorn main:app --reload
   cd frontend && npm run dev
   
   # Ouvrir http://localhost:5173
   # S√©lectionner projet
   # Cliquer "Optimiser le calendrier"
   # V√©rifier :
   # - Spinner pendant r√©solution
   # - Toast succ√®s avec r√©sultat
   # - Calendrier mis √† jour (nouveaux matchs affich√©s)
   ```

2. ‚úÖ **Test d√©sactivation bouton** :
   ```bash
   # Fixer tous les matchs d'un projet
   curl -X POST http://localhost:8000/matches/1/fix
   curl -X POST http://localhost:8000/matches/2/fix
   # ...
   
   # Recharger frontend
   # V√©rifier :
   # - Bouton "Optimiser" d√©sactiv√©
   # - Message "Aucun match modifiable" affich√©
   ```

3. ‚úÖ **Test gestion erreurs** :
   ```bash
   # Tester projet sans √©quipes/gymnases
   # V√©rifier :
   # - Toast erreur affich√©
   # - Message clair (SolverError)
   ```

4. ‚úÖ **Test modal configuration (si impl√©ment√©)** :
   ```bash
   # Cliquer "Configurer et optimiser"
   # Changer strat√©gie ‚Üí heuristique
   # Changer temps_max ‚Üí 60s
   # Cliquer "Optimiser"
   # V√©rifier :
   # - Strat√©gie override utilis√©e
   # - R√©sultat affich√© avec strat√©gie "heuristique"
   ```

5. ‚úÖ **Test progression async (si impl√©ment√©)** :
   ```bash
   # Lancer r√©solution async
   # V√©rifier :
   # - Barre de progression affich√©e
   # - Mise √† jour toutes les 1s
   # - R√©sultat affich√© √† la fin
   ```

**Commandes de test** :
```bash
# Installer d√©pendances
cd frontend
npm install react-hot-toast @headlessui/react @heroicons/react

# Lancer dev
npm run dev

# Build production
npm run build
npm run preview
```

---

## Questions

**Questions critiques** :

1. **Toast vs modal r√©sultat** :
   - Toast suffisant pour afficher r√©sultat ?
   - Ou modal d√©taill√© avec graphiques (matchs planifi√©s/semaine) ?
   - Faut-il historique des r√©solutions (avec rollback) ?

2. **Override config** :
   - Faut-il permettre override strat√©gie/temps_max ?
   - Ou forcer utilisation config YAML (plus simple) ?
   - Si override, faut-il sauvegarder dans projet (metadata) ?

3. **R√©solution async** :
   - Polling statut toutes les secondes acceptable ?
   - Ou websockets pour push temps r√©el ?
   - Faut-il annulation r√©solution en cours (bouton "Annuler") ?

4. **Feedback utilisateur** :
   - Afficher progression d√©taill√©e (contraintes trait√©es, it√©rations) ?
   - Ou simple spinner "Optimisation en cours" ?
   - Faut-il logs visibles (console frontend) ?

5. **Gestion erreurs** :
   - Message d'erreur g√©n√©rique ok (toast) ?
   - Ou d√©tails techniques (contraintes viol√©es, matchs conflictuels) ?
   - Faut-il suggestions (ex: "Lib√©rez des matchs fixes pour permettre optimisation") ?

6. **UX calendrier** :
   - Apr√®s r√©solution, faut-il auto-scroll vers premi√®re semaine modifi√©e ?
   - Faut-il highlight matchs nouvellement planifi√©s ?
   - Faut-il animation (fade-in) pour nouveaux matchs ?

---

## Documentation

Documenter uniquement :
- **SolveButton** : Expliquer d√©sactivation si aucun match modifiable
- **useSolve** : Expliquer invalidation cache (matchs, stats, projet)
- **Modal config** : Expliquer override temporaire (pas persiste)
- **Async** : Expliquer polling vs websockets (si impl√©ment√©)
- **Toast** : Expliquer react-hot-toast pour notifications
