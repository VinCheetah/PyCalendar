#!/usr/bin/env python3
"""
Script d'import d'un projet depuis config YAML + Excel.

Charge les donn√©es depuis les fichiers de configuration et les importe dans la DB.
Utilise le service de synchronisation (SyncService) cr√©√© en T√¢che 1.6.
"""

import sys
from pathlib import Path
import argparse

# Ajouter r√©pertoire racine au sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from backend.database.engine import SessionLocal, DATABASE_PATH
from backend.services.sync_service import SyncService


def main():
    # Parser arguments
    parser = argparse.ArgumentParser(
        description="Importer un projet depuis config YAML + Excel",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples:
  # Import avec nom auto-g√©n√©r√©
  python scripts/import_excel.py configs/config_volley.yaml
  
  # Import avec nom personnalis√©
  python scripts/import_excel.py configs/config_volley.yaml "Championnat Volley 2025"
  
  # Import sans validation Excel (d√©conseill√©)
  python scripts/import_excel.py configs/config_volley.yaml --no-validate
        """
    )
    
    parser.add_argument(
        "config_path",
        help="Chemin vers le fichier YAML de configuration"
    )
    parser.add_argument(
        "project_name",
        nargs="?",
        default=None,
        help="Nom du projet (optionnel, g√©n√©r√© automatiquement si absent)"
    )
    parser.add_argument(
        "--no-validate",
        action="store_true",
        help="D√©sactiver la validation Excel (actualiser_config.py)"
    )
    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="Afficher plus de d√©tails"
    )
    
    args = parser.parse_args()
    
    # V√©rifier que DB existe
    if not DATABASE_PATH.exists():
        print("‚ùå Base de donn√©es non trouv√©e!")
        print(f"   Ex√©cutez d'abord : python scripts/init_db.py")
        sys.exit(1)
    
    # V√©rifier que fichier YAML existe
    yaml_path = Path(args.config_path)
    if not yaml_path.exists():
        print(f"‚ùå Fichier YAML non trouv√© : {yaml_path}")
        sys.exit(1)
    
    # Afficher header
    print("=" * 70)
    print("Import d'un projet dans PyCalendar")
    print("=" * 70)
    print(f"\nüìÑ Configuration YAML : {yaml_path}")
    
    # Import
    db = SessionLocal()
    service = SyncService(db)
    
    try:
        # Importer via service (T√¢che 1.6)
        validate_excel = not args.no_validate
        
        if args.verbose:
            print(f"üîç Validation Excel : {'Activ√©e' if validate_excel else 'D√©sactiv√©e'}")
        
        print(f"\nüöÄ D√©marrage de l'import...\n")
        
        project = service.import_from_excel(
            yaml_path=str(yaml_path),
            project_name=args.project_name,
            validate_excel=validate_excel
        )
        
        # Afficher statistiques
        print(f"\n{'=' * 70}")
        print(f"‚úÖ Import termin√© avec succ√®s!")
        print(f"{'=' * 70}")
        print(f"\nüìä Statistiques du projet :")
        print(f"   ID         : {project.id}")
        print(f"   Nom        : {project.nom}")
        print(f"   Sport      : {project.sport}")
        print(f"   Semaines   : {project.nb_semaines}")
        print(f"   Semaine min: {project.semaine_min}")
        print(f"\nüìà Donn√©es import√©es :")
        print(f"   √âquipes    : {len(project.teams)}")
        print(f"   Gymnases   : {len(project.venues)}")
        print(f"   Matchs     : {len(project.matches)}")
        
        # D√©tails matchs
        nb_planifies = sum(1 for m in project.matches if m.semaine is not None)
        nb_fixes = sum(1 for m in project.matches if m.est_fixe)
        print(f"\nüéØ √âtat des matchs :")
        print(f"   Planifi√©s  : {nb_planifies}")
        print(f"   Fix√©s      : {nb_fixes}")
        print(f"   √Ä planifier: {len(project.matches) - nb_planifies}")
        
        # Fichiers config
        if project.config_data:
            print(f"\nüìÅ Fichiers de configuration :")
            print(f"   YAML  : {project.config_yaml_path}")
            if 'excel_path' in project.config_data:
                print(f"   Excel : {project.config_data['excel_path']}")
        
        print(f"\nüí° Prochaines √©tapes :")
        print(f"   1. D√©marrer l'API : python run_api.py")
        print(f"   2. Ou : uvicorn backend.api.main:app --reload")
        print(f"   3. Acc√©der √† la documentation : http://localhost:8000/docs")
        
    except FileNotFoundError as e:
        print(f"\n‚ùå Fichier non trouv√© : {e}")
        sys.exit(1)
    except ValueError as e:
        print(f"\n‚ùå Erreur de validation : {e}")
        print(f"\nüí° Suggestions :")
        print(f"   1. Ex√©cutez : python actualiser_config.py <fichier_excel>")
        print(f"   2. Corrigez les erreurs d√©tect√©es")
        print(f"   3. Relancez cet import")
        print(f"   OU")
        print(f"   4. Ajoutez --no-validate pour ignorer la validation (d√©conseill√©)")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'import : {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)
    finally:
        db.close()


if __name__ == "__main__":
    main()
